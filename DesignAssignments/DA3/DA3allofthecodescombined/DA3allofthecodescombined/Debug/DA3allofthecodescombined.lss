
DA3allofthecodescombined.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e6  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000905  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000321  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000dc  00000000  00000000  00001e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_33>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_44>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
volatile uint16_t timer3_counter = 0; //counter for Timer3 interrupts
volatile uint16_t timer4_counter = 0; //counter for Timer4 interrupts

int main(void) {
	// Configure Timer0 for 0.125ms delay (PB5 LED)
	DDRB |= (1 << PB5);              // Set PB5 as output
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	84 b9       	out	0x04, r24	; 4
	TCCR0A = 0;                      // Normal mode
  e2:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 0x83;                    // Initial value for 125us overflow
  e4:	83 e8       	ldi	r24, 0x83	; 131
  e6:	86 bd       	out	0x26, r24	; 38
	TCCR0B |= (1 << CS01);           // Prescaler 8
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	85 bd       	out	0x25, r24	; 37
	uint16_t timer0_counter = 0;     // Software counter for Timer0 overflows

	// Configure Timer3 for 0.25ms interrupts (CTC mode, PB4 LED)
	DDRB |= (1 << PB4);              // Set PB4 as output
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	84 b9       	out	0x04, r24	; 4
	TCCR3A = 0;                      // Normal port operation
  f4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30); // CTC mode, prescaler 64
  f8:	8b e0       	ldi	r24, 0x0B	; 11
  fa:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
	OCR3A = 30;                      // Compare match value for ~0.248ms
  fe:	8e e1       	ldi	r24, 0x1E	; 30
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 106:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
	TIMSK3 |= (1 << OCIE3A);         // Enable compare match interrupt
 10a:	e1 e7       	ldi	r30, 0x71	; 113
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	82 60       	ori	r24, 0x02	; 2
 112:	80 83       	st	Z, r24

	// Configure Timer4 for 0.1ms interrupts (Normal mode, PB3 LED)
	DDRB |= (1 << PB3);              // Set PB3 as output
 114:	84 b1       	in	r24, 0x04	; 4
 116:	88 60       	ori	r24, 0x08	; 8
 118:	84 b9       	out	0x04, r24	; 4
	TCNT4 = 0xFF9C;                  // Preload for 100us overflow (65436)
 11a:	8c e9       	ldi	r24, 0x9C	; 156
 11c:	9f ef       	ldi	r25, 0xFF	; 255
 11e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 122:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
	TCCR4A = 0;                      // Normal mode
 126:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
	TCCR4B = (1 << CS41);            // Prescaler 8
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
	TIMSK4 |= (1 << TOIE4);          // Enable overflow interrupt
 130:	e2 e7       	ldi	r30, 0x72	; 114
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	81 60       	ori	r24, 0x01	; 1
 138:	80 83       	st	Z, r24

	sei();                           // Enable global interrupts
 13a:	78 94       	sei
#include <avr/interrupt.h>

volatile uint16_t timer3_counter = 0; //counter for Timer3 interrupts
volatile uint16_t timer4_counter = 0; //counter for Timer4 interrupts

int main(void) {
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0

	sei();                           // Enable global interrupts

	while (1) {
		// Poll Timer0 overflow flag
		if (TIFR0 & (1 << TOV0)) {   // Check overflow flag
 140:	a8 9b       	sbis	0x15, 0	; 21
 142:	fe cf       	rjmp	.-4      	; 0x140 <main+0x64>
			TIFR0 = (1 << TOV0);     // Clear flag
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	25 bb       	out	0x15, r18	; 21
			timer0_counter++;
 148:	01 96       	adiw	r24, 0x01	; 1
			if (timer0_counter >= 12000) {
 14a:	80 3e       	cpi	r24, 0xE0	; 224
 14c:	2e e2       	ldi	r18, 0x2E	; 46
 14e:	92 07       	cpc	r25, r18
 150:	b8 f3       	brcs	.-18     	; 0x140 <main+0x64>
				PORTB ^= (1 << PB5); // Toggle PB5 every 1.5s
 152:	95 b1       	in	r25, 0x05	; 5
 154:	80 e2       	ldi	r24, 0x20	; 32
 156:	89 27       	eor	r24, r25
 158:	85 b9       	out	0x05, r24	; 5
 15a:	f0 cf       	rjmp	.-32     	; 0x13c <main+0x60>

0000015c <__vector_33>:
		}
	}
}

// Timer3 Compare A ISR: Toggles PB4 every 2 seconds
ISR(TIMER3_COMPA_vect) {
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
	timer3_counter++;
 16c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer3_counter>
 170:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer3_counter+0x1>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer3_counter+0x1>
 17a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer3_counter>
	if (timer3_counter >= 16128) { //2 seconds
 17e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer3_counter>
 182:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer3_counter+0x1>
 186:	81 15       	cp	r24, r1
 188:	9f 43       	sbci	r25, 0x3F	; 63
 18a:	40 f0       	brcs	.+16     	; 0x19c <__vector_33+0x40>
		PORTB ^= (1 << PB4);         // Toggle PB4
 18c:	95 b1       	in	r25, 0x05	; 5
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	89 27       	eor	r24, r25
 192:	85 b9       	out	0x05, r24	; 5
		timer3_counter = 0;
 194:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer3_counter+0x1>
 198:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer3_counter>
	}
}
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_44>:

// Timer4 Overflow ISR: Toggles PB3 every 1 second
ISR(TIMER4_OVF_vect) {
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
	TCNT4 = 0xFF9C;                  // Reload preload value
 1bc:	8c e9       	ldi	r24, 0x9C	; 156
 1be:	9f ef       	ldi	r25, 0xFF	; 255
 1c0:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 1c4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
	timer4_counter++;
 1c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1cc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (timer4_counter >= 20000) { //1 second
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e2:	80 32       	cpi	r24, 0x20	; 32
 1e4:	9e 44       	sbci	r25, 0x4E	; 78
 1e6:	40 f0       	brcs	.+16     	; 0x1f8 <__vector_44+0x4c>
		PORTB ^= (1 << PB3);         // Toggle PB3
 1e8:	95 b1       	in	r25, 0x05	; 5
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	89 27       	eor	r24, r25
 1ee:	85 b9       	out	0x05, r24	; 5
		timer4_counter = 0;
 1f0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
