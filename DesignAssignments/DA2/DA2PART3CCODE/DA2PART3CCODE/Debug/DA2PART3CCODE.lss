
DA2PART3CCODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a13  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000926  00000000  00000000  00000cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  0000161d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000490  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000186  00000000  00000000  00001e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002012  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_1>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  c4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <delay_150ms>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void delay_150ms(void) {
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	00 d0       	rcall	.+0      	; 0xd2 <delay_150ms+0x6>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <delay_150ms+0x8>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t i = 0;
  d8:	1a 82       	std	Y+2, r1	; 0x02
  da:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16_t j = 0;
  dc:	1c 82       	std	Y+4, r1	; 0x04
  de:	1b 82       	std	Y+3, r1	; 0x03
	while(i < 660) {         //outer loop remains at 660 iterations
  e0:	12 c0       	rjmp	.+36     	; 0x106 <delay_150ms+0x3a>
		j = 0;
  e2:	1c 82       	std	Y+4, r1	; 0x04
  e4:	1b 82       	std	Y+3, r1	; 0x03
		while(j < 200) {    //inner loop: 200 * 20 = 4000 iterations
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <delay_150ms+0x26>
			j++;
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	9c 81       	ldd	r25, Y+4	; 0x04
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	9c 83       	std	Y+4, r25	; 0x04
  f0:	8b 83       	std	Y+3, r24	; 0x03
void delay_150ms(void) {
	volatile uint16_t i = 0;
	volatile uint16_t j = 0;
	while(i < 660) {         //outer loop remains at 660 iterations
		j = 0;
		while(j < 200) {    //inner loop: 200 * 20 = 4000 iterations
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	9c 81       	ldd	r25, Y+4	; 0x04
  f6:	88 3c       	cpi	r24, 0xC8	; 200
  f8:	91 05       	cpc	r25, r1
  fa:	b0 f3       	brcs	.-20     	; 0xe8 <delay_150ms+0x1c>
			j++;
		}
		i++;
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01
#include <util/delay.h>

void delay_150ms(void) {
	volatile uint16_t i = 0;
	volatile uint16_t j = 0;
	while(i < 660) {         //outer loop remains at 660 iterations
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	84 39       	cpi	r24, 0x94	; 148
 10c:	92 40       	sbci	r25, 0x02	; 2
 10e:	48 f3       	brcs	.-46     	; 0xe2 <delay_150ms+0x16>
		while(j < 200) {    //inner loop: 200 * 20 = 4000 iterations
			j++;
		}
		i++;
	}
}
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <__vector_1>:

ISR(INT0_vect) {
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	//interrupt-based handling: turn on LED and delay for 3 sec.
	PORTB |= (1 << 5);            //turn on LED at PB5
 144:	85 b1       	in	r24, 0x05	; 5
 146:	80 62       	ori	r24, 0x20	; 32
 148:	85 b9       	out	0x05, r24	; 5
	for(int k = 0; k < 10; k++ ){
 14a:	c0 e0       	ldi	r28, 0x00	; 0
 14c:	d0 e0       	ldi	r29, 0x00	; 0
 14e:	03 c0       	rjmp	.+6      	; 0x156 <__vector_1+0x38>
		delay_150ms();
 150:	0e 94 66 00 	call	0xcc	; 0xcc <delay_150ms>
}

ISR(INT0_vect) {
	//interrupt-based handling: turn on LED and delay for 3 sec.
	PORTB |= (1 << 5);            //turn on LED at PB5
	for(int k = 0; k < 10; k++ ){
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	ca 30       	cpi	r28, 0x0A	; 10
 158:	d1 05       	cpc	r29, r1
 15a:	d4 f3       	brlt	.-12     	; 0x150 <__vector_1+0x32>
		delay_150ms();
	}
	                //delay 3 seconds (blocking delay)
	PORTB &= ~(1 << 5);           //turn off LED
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	85 b9       	out	0x05, r24	; 5
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:

int main(void) {
	DDRB |= (1 << 5);             //set PB5 as output
 188:	84 b1       	in	r24, 0x04	; 4
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << 5);           //make sure LED is initially off
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	85 b9       	out	0x05, r24	; 5
	
	DDRC &= ~(1 << 1); //set pc1 for input
 194:	87 b1       	in	r24, 0x07	; 7
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << 1); //enable pull-up resistor for pc1
 19a:	88 b1       	in	r24, 0x08	; 8
 19c:	82 60       	ori	r24, 0x02	; 2
 19e:	88 b9       	out	0x08, r24	; 8

	DDRD &= ~(1 << 2);            //set PD2 as input
 1a0:	8a b1       	in	r24, 0x0a	; 10
 1a2:	8b 7f       	andi	r24, 0xFB	; 251
 1a4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << 2);            //enable internal pull-up on PD2
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	8b b9       	out	0x0b, r24	; 11

	
	EICRA |= (1 << ISC01) | (1 << ISC00);  //rising edge trigger for INT0
 1ac:	e9 e6       	ldi	r30, 0x69	; 105
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	83 60       	ori	r24, 0x03	; 3
 1b4:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);                  //enable external interrupt INT0
 1b6:	8d b3       	in	r24, 0x1d	; 29
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	8d bb       	out	0x1d, r24	; 29

	sei();                          //enable global interrupts
 1bc:	78 94       	sei

	while(1) {            //start infinite loop
		if (!(PINC & (1 << 1))) {  //check if button at pc1 is pressed (active low)
 1be:	31 99       	sbic	0x06, 1	; 6
 1c0:	10 c0       	rjmp	.+32     	; 0x1e2 <main+0x5a>
			PORTB |= (1 << 5);     //turn on led on pb5
 1c2:	85 b1       	in	r24, 0x05	; 5
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	85 b9       	out	0x05, r24	; 5
			uint8_t count = 10;    //we want a total delay of 1.5 seconds (10 x 150 ms)
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
			while(count--) {       //loop 10 times
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <main+0x4a>
				delay_150ms();     //delay occurs here (~150 ms delay)
 1cc:	0e 94 66 00 	call	0xcc	; 0xcc <delay_150ms>

	while(1) {            //start infinite loop
		if (!(PINC & (1 << 1))) {  //check if button at pc1 is pressed (active low)
			PORTB |= (1 << 5);     //turn on led on pb5
			uint8_t count = 10;    //we want a total delay of 1.5 seconds (10 x 150 ms)
			while(count--) {       //loop 10 times
 1d0:	8c 2f       	mov	r24, r28
 1d2:	cf ef       	ldi	r28, 0xFF	; 255
 1d4:	c8 0f       	add	r28, r24
 1d6:	81 11       	cpse	r24, r1
 1d8:	f9 cf       	rjmp	.-14     	; 0x1cc <main+0x44>
				delay_150ms();     //delay occurs here (~150 ms delay)
			}
			PORTB &= ~(1 << 5);    //turn off led on pb5 after delay
 1da:	85 b1       	in	r24, 0x05	; 5
 1dc:	8f 7d       	andi	r24, 0xDF	; 223
 1de:	85 b9       	out	0x05, r24	; 5
 1e0:	ee cf       	rjmp	.-36     	; 0x1be <main+0x36>
			} else {
			PORTB &= ~(1 << 5);    //ensure led remains off when button is not pressed
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	85 b9       	out	0x05, r24	; 5
 1e8:	ea cf       	rjmp	.-44     	; 0x1be <main+0x36>

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
