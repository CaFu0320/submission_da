
DA2PART1CCODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d8  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000917  00000000  00000000  00000c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d5  00000000  00000000  00001543  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000485  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007d  00000000  00000000  00001ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  c4:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <delay_150ms>:
 */ 
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>

void delay_150ms(void) {
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	00 d0       	rcall	.+0      	; 0xd2 <delay_150ms+0x6>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <delay_150ms+0x8>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t i = 0;
  d8:	1a 82       	std	Y+2, r1	; 0x02
  da:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16_t j = 0;
  dc:	1c 82       	std	Y+4, r1	; 0x04
  de:	1b 82       	std	Y+3, r1	; 0x03
	while(i < 660) {       //outer loop
  e0:	12 c0       	rjmp	.+36     	; 0x106 <delay_150ms+0x3a>
		j = 0;
  e2:	1c 82       	std	Y+4, r1	; 0x04
  e4:	1b 82       	std	Y+3, r1	; 0x03
		while(j < 200) {   //inner loop
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <delay_150ms+0x26>
			j++;
  e8:	8b 81       	ldd	r24, Y+3	; 0x03
  ea:	9c 81       	ldd	r25, Y+4	; 0x04
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	9c 83       	std	Y+4, r25	; 0x04
  f0:	8b 83       	std	Y+3, r24	; 0x03
void delay_150ms(void) {
	volatile uint16_t i = 0;
	volatile uint16_t j = 0;
	while(i < 660) {       //outer loop
		j = 0;
		while(j < 200) {   //inner loop
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	9c 81       	ldd	r25, Y+4	; 0x04
  f6:	88 3c       	cpi	r24, 0xC8	; 200
  f8:	91 05       	cpc	r25, r1
  fa:	b0 f3       	brcs	.-20     	; 0xe8 <delay_150ms+0x1c>
			j++;
		}
		i++;
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	9a 81       	ldd	r25, Y+2	; 0x02
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	89 83       	std	Y+1, r24	; 0x01
#include <util/delay.h>

void delay_150ms(void) {
	volatile uint16_t i = 0;
	volatile uint16_t j = 0;
	while(i < 660) {       //outer loop
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	9a 81       	ldd	r25, Y+2	; 0x02
 10a:	84 39       	cpi	r24, 0x94	; 148
 10c:	92 40       	sbci	r25, 0x02	; 2
 10e:	48 f3       	brcs	.-46     	; 0xe2 <delay_150ms+0x16>
		while(j < 200) {   //inner loop
			j++;
		}
		i++;
	}
} //this loop creates 660*200 = 132k iterations
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:

int main(void) {            // main function entry point
	DDRC &= ~(1 << 1); //set pc1 for input
 11e:	87 b1       	in	r24, 0x07	; 7
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << 1); //enable pull-up resistor for pc1
 124:	88 b1       	in	r24, 0x08	; 8
 126:	82 60       	ori	r24, 0x02	; 2
 128:	88 b9       	out	0x08, r24	; 8
	DDRB |= (1 << 5); //set pb5 for output
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << 5); //make sure led on pb5 is initially off
 130:	85 b1       	in	r24, 0x05	; 5
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	85 b9       	out	0x05, r24	; 5
	while(1) {            // start infinite loop
		if (!(PINC & (1 << 1))) {  // check if button at pc1 is pressed (active low)
 136:	31 99       	sbic	0x06, 1	; 6
 138:	10 c0       	rjmp	.+32     	; 0x15a <main+0x3c>
			PORTB |= (1 << 5);     // turn on led on pb5
 13a:	85 b1       	in	r24, 0x05	; 5
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	85 b9       	out	0x05, r24	; 5
			uint8_t count = 10;    // we want a total delay of 1.5 seconds (10 x 150 ms)
 140:	8a e0       	ldi	r24, 0x0A	; 10
			while(count--) {       // loop 10 times
 142:	03 c0       	rjmp	.+6      	; 0x14a <main+0x2c>
				delay_150ms();     // delay occurs here (~150 ms delay)
 144:	0e 94 66 00 	call	0xcc	; 0xcc <delay_150ms>
	PORTB &= ~(1 << 5); //make sure led on pb5 is initially off
	while(1) {            // start infinite loop
		if (!(PINC & (1 << 1))) {  // check if button at pc1 is pressed (active low)
			PORTB |= (1 << 5);     // turn on led on pb5
			uint8_t count = 10;    // we want a total delay of 1.5 seconds (10 x 150 ms)
			while(count--) {       // loop 10 times
 148:	8c 2f       	mov	r24, r28
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	c8 0f       	add	r28, r24
 14e:	81 11       	cpse	r24, r1
 150:	f9 cf       	rjmp	.-14     	; 0x144 <main+0x26>
				delay_150ms();     // delay occurs here (~150 ms delay)
			}
			PORTB &= ~(1 << 5);    // turn off led on pb5 after delay
 152:	85 b1       	in	r24, 0x05	; 5
 154:	8f 7d       	andi	r24, 0xDF	; 223
 156:	85 b9       	out	0x05, r24	; 5
 158:	ee cf       	rjmp	.-36     	; 0x136 <main+0x18>
			} else {
			PORTB &= ~(1 << 5);    // ensure led remains off when button is not pressed
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	85 b9       	out	0x05, r24	; 5
 160:	ea cf       	rjmp	.-44     	; 0x136 <main+0x18>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
