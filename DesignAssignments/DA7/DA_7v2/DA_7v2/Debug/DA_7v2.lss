
DA_7v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  000017e4  00001878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800178  00800178  000018f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019c7  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b88  00000000  00000000  000033ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000981  00000000  00000000  00003f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000048f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065c  00000000  00000000  00004b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ae  00000000  00000000  000051c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005b76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0b 02 	jmp	0x416	; 0x416 <__ctors_end>
       4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
       8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
       c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      10:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      14:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      18:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      1c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      20:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      24:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      28:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      2c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      30:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      34:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      38:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      3c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      40:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      44:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      48:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      4c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      50:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      54:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      58:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      5c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      60:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      64:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      68:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      6c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      70:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      74:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      78:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      7c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      80:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      84:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      88:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      8c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      90:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      94:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      98:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      9c:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      a0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      a4:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      a8:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      ac:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      b0:	0c 94 28 02 	jmp	0x450	; 0x450 <__bad_interrupt>
      b4:	08 4a       	sbci	r16, 0xA8	; 168
      b6:	d7 3b       	cpi	r29, 0xB7	; 183
      b8:	3b ce       	rjmp	.-906    	; 0xfffffd30 <__eeprom_end+0xff7efd30>
      ba:	01 6e       	ori	r16, 0xE1	; 225
      bc:	84 bc       	out	0x24, r8	; 36
      be:	bf fd       	.word	0xfdbf	; ????
      c0:	c1 2f       	mov	r28, r17
      c2:	3d 6c       	ori	r19, 0xCD	; 205
      c4:	74 31       	cpi	r23, 0x14	; 20
      c6:	9a bd       	out	0x2a, r25	; 42
      c8:	56 83       	std	Z+6, r21	; 0x06
      ca:	3d da       	rcall	.-2950   	; 0xfffff546 <__eeprom_end+0xff7ef546>
      cc:	3d 00       	.word	0x003d	; ????
      ce:	c7 7f       	andi	r28, 0xF7	; 247
      d0:	11 be       	out	0x31, r1	; 49
      d2:	d9 e4       	ldi	r29, 0x49	; 73
      d4:	bb 4c       	sbci	r27, 0xCB	; 203
      d6:	3e 91       	ld	r19, -X
      d8:	6b aa       	std	Y+51, r6	; 0x33
      da:	aa be       	out	0x3a, r10	; 58
      dc:	00 00       	nop
      de:	00 80       	ld	r0, Z
      e0:	3f 00       	.word	0x003f	; ????

000000e2 <__trampolines_end>:
      e2:	00 40       	sbci	r16, 0x00	; 0
      e4:	7a 10       	cpse	r7, r10
      e6:	f3 5a       	subi	r31, 0xA3	; 163
      e8:	00 a0       	ldd	r0, Z+32	; 0x20
      ea:	72 4e       	sbci	r23, 0xE2	; 226
      ec:	18 09       	sbc	r17, r8
      ee:	00 10       	cpse	r0, r0
      f0:	a5 d4       	rcall	.+2378   	; 0xa3c <__stack+0x13d>
      f2:	e8 00       	.word	0x00e8	; ????
      f4:	00 e8       	ldi	r16, 0x80	; 128
      f6:	76 48       	sbci	r23, 0x86	; 134
      f8:	17 00       	.word	0x0017	; ????
      fa:	00 e4       	ldi	r16, 0x40	; 64
      fc:	0b 54       	subi	r16, 0x4B	; 75
      fe:	02 00       	.word	0x0002	; ????
     100:	00 ca       	rjmp	.-3072   	; 0xfffff502 <__eeprom_end+0xff7ef502>
     102:	9a 3b       	cpi	r25, 0xBA	; 186
     104:	00 00       	nop
     106:	00 e1       	ldi	r16, 0x10	; 16
     108:	f5 05       	cpc	r31, r5
     10a:	00 00       	nop
     10c:	80 96       	adiw	r24, 0x20	; 32
     10e:	98 00       	.word	0x0098	; ????
     110:	00 00       	nop
     112:	40 42       	sbci	r20, 0x20	; 32
     114:	0f 00       	.word	0x000f	; ????
     116:	00 00       	nop
     118:	a0 86       	std	Z+8, r10	; 0x08
     11a:	01 00       	.word	0x0001	; ????
     11c:	00 00       	nop
     11e:	10 27       	eor	r17, r16
     120:	00 00       	nop
     122:	00 00       	nop
     124:	e8 03       	fmulsu	r22, r16
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	64 00       	.word	0x0064	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	0a 00       	.word	0x000a	; ????
     132:	00 00       	nop
     134:	00 00       	nop
     136:	01 00       	.word	0x0001	; ????
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	2c 76       	andi	r18, 0x6C	; 108
     13e:	d8 88       	ldd	r13, Y+16	; 0x10
     140:	dc 67       	ori	r29, 0x7C	; 124
     142:	4f 08       	sbc	r4, r15
     144:	23 df       	rcall	.-442    	; 0xffffff8c <__eeprom_end+0xff7eff8c>
     146:	c1 df       	rcall	.-126    	; 0xca <__SREG__+0x8b>
     148:	ae 59       	subi	r26, 0x9E	; 158
     14a:	e1 b1       	in	r30, 0x01	; 1
     14c:	b7 96       	adiw	r30, 0x27	; 39
     14e:	e5 e3       	ldi	r30, 0x35	; 53
     150:	e4 53       	subi	r30, 0x34	; 52
     152:	c6 3a       	cpi	r28, 0xA6	; 166
     154:	e6 51       	subi	r30, 0x16	; 22
     156:	99 76       	andi	r25, 0x69	; 105
     158:	96 e8       	ldi	r25, 0x86	; 134
     15a:	e6 c2       	rjmp	.+1484   	; 0x728 <bmi160_read_bytes+0x52>
     15c:	84 26       	eor	r8, r20
     15e:	eb 89       	ldd	r30, Y+19	; 0x13
     160:	8c 9b       	sbis	0x11, 4	; 17
     162:	62 ed       	ldi	r22, 0xD2	; 210
     164:	40 7c       	andi	r20, 0xC0	; 192
     166:	6f fc       	.word	0xfc6f	; ????
     168:	ef bc       	out	0x2f, r14	; 47
     16a:	9c 9f       	mul	r25, r28
     16c:	40 f2       	brcs	.-112    	; 0xfe <__trampolines_end+0x1c>
     16e:	ba a5       	ldd	r27, Y+42	; 0x2a
     170:	6f a5       	ldd	r22, Y+47	; 0x2f
     172:	f4 90       	lpm	r15, Z
     174:	05 5a       	subi	r16, 0xA5	; 165
     176:	2a f7       	brpl	.-54     	; 0x142 <__trampolines_end+0x60>
     178:	5c 93       	st	X, r21
     17a:	6b 6c       	ori	r22, 0xCB	; 203
     17c:	f9 67       	ori	r31, 0x79	; 121
     17e:	6d c1       	rjmp	.+730    	; 0x45a <USART_Init+0x6>
     180:	1b fc       	.word	0xfc1b	; ????
     182:	e0 e4       	ldi	r30, 0x40	; 64
     184:	0d 47       	sbci	r16, 0x7D	; 125
     186:	fe f5       	brtc	.+126    	; 0x206 <ssd1306oled_font+0x2a>
     188:	20 e6       	ldi	r18, 0x60	; 96
     18a:	b5 00       	.word	0x00b5	; ????
     18c:	d0 ed       	ldi	r29, 0xD0	; 208
     18e:	90 2e       	mov	r9, r16
     190:	03 00       	.word	0x0003	; ????
     192:	94 35       	cpi	r25, 0x54	; 84
     194:	77 05       	cpc	r23, r7
     196:	00 80       	ld	r0, Z
     198:	84 1e       	adc	r8, r20
     19a:	08 00       	.word	0x0008	; ????
     19c:	00 20       	and	r0, r0
     19e:	4e 0a       	sbc	r4, r30
     1a0:	00 00       	nop
     1a2:	00 c8       	rjmp	.-4096   	; 0xfffff1a4 <__eeprom_end+0xff7ef1a4>
     1a4:	0c 33       	cpi	r16, 0x3C	; 60
     1a6:	33 33       	cpi	r19, 0x33	; 51
     1a8:	33 0f       	add	r19, r19
     1aa:	98 6e       	ori	r25, 0xE8	; 232
     1ac:	12 83       	std	Z+2, r17	; 0x02
     1ae:	11 41       	sbci	r17, 0x11	; 17
     1b0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b2:	21 14       	cp	r2, r1
     1b4:	89 3b       	cpi	r24, 0xB9	; 185
     1b6:	e6 55       	subi	r30, 0x56	; 86
     1b8:	16 cf       	rjmp	.-468    	; 0xffffffe6 <__eeprom_end+0xff7effe6>
     1ba:	fe e6       	ldi	r31, 0x6E	; 110
     1bc:	db 18       	sub	r13, r11
     1be:	d1 84       	ldd	r13, Z+9	; 0x09
     1c0:	4b 38       	cpi	r20, 0x8B	; 139
     1c2:	1b f7       	brvc	.-58     	; 0x18a <__trampolines_end+0xa8>
     1c4:	7c 1d       	adc	r23, r12
     1c6:	90 1d       	adc	r25, r0
     1c8:	a4 bb       	out	0x14, r26	; 20
     1ca:	e4 24       	eor	r14, r4
     1cc:	20 32       	cpi	r18, 0x20	; 32
     1ce:	84 72       	andi	r24, 0x24	; 36
     1d0:	5e 22       	and	r5, r30
     1d2:	81 00       	.word	0x0081	; ????
     1d4:	c9 f1       	breq	.+114    	; 0x248 <ssd1306oled_font+0x6c>
     1d6:	24 ec       	ldi	r18, 0xC4	; 196
     1d8:	a1 e5       	ldi	r26, 0x51	; 81
     1da:	3d 27       	eor	r19, r29

000001dc <ssd1306oled_font>:
	...
     1e4:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
     1f4:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
     204:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
     214:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
     224:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
     234:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     244:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
     254:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
     264:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     274:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     284:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     294:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     2a4:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     2b4:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     2c4:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     2d4:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     2e4:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     2f4:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     304:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     314:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     324:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     334:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     344:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     354:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     364:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     374:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     384:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     394:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     3a4:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     3b4:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     3c4:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     3d4:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     3e4:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     3f4:	a0 a0 a0 7c 00 44 64 54 4c 44 00 00 08 77 41 00     ...|.DdTLD...wA.
     404:	00 00 00 63 00 00 00 00 41 77 08 00 00 08 04 08     ...c....Aw......
     414:	08 04                                               ..

00000416 <__ctors_end>:
     416:	11 24       	eor	r1, r1
     418:	1f be       	out	0x3f, r1	; 63
     41a:	cf ef       	ldi	r28, 0xFF	; 255
     41c:	d8 e0       	ldi	r29, 0x08	; 8
     41e:	de bf       	out	0x3e, r29	; 62
     420:	cd bf       	out	0x3d, r28	; 61

00000422 <__do_copy_data>:
     422:	11 e0       	ldi	r17, 0x01	; 1
     424:	a0 e0       	ldi	r26, 0x00	; 0
     426:	b1 e0       	ldi	r27, 0x01	; 1
     428:	e4 ee       	ldi	r30, 0xE4	; 228
     42a:	f7 e1       	ldi	r31, 0x17	; 23
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x10>
     42e:	05 90       	lpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	a8 37       	cpi	r26, 0x78	; 120
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0xc>

00000438 <__do_clear_bss>:
     438:	21 e0       	ldi	r18, 0x01	; 1
     43a:	a8 e7       	ldi	r26, 0x78	; 120
     43c:	b1 e0       	ldi	r27, 0x01	; 1
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	a0 39       	cpi	r26, 0x90	; 144
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	0e 94 77 05 	call	0xaee	; 0xaee <main>
     44c:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <_exit>

00000450 <__bad_interrupt>:
     450:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000454 <USART_Init>:
void oled_clear(void); //clearing the screen
void oled_draw_string(uint8_t x, uint8_t page, const char *str); //drawing text at specific positions

//UART
void USART_Init(unsigned long BAUDRATE) { //setting up the serial plotter
	uint16_t ubrr_value = (F_CPU / (16UL * BAUDRATE)) - 1;
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	aa 1f       	adc	r26, r26
     45e:	bb 1f       	adc	r27, r27
     460:	88 0f       	add	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	aa 1f       	adc	r26, r26
     466:	bb 1f       	adc	r27, r27
     468:	9c 01       	movw	r18, r24
     46a:	ad 01       	movw	r20, r26
     46c:	22 0f       	add	r18, r18
     46e:	33 1f       	adc	r19, r19
     470:	44 1f       	adc	r20, r20
     472:	55 1f       	adc	r21, r21
     474:	22 0f       	add	r18, r18
     476:	33 1f       	adc	r19, r19
     478:	44 1f       	adc	r20, r20
     47a:	55 1f       	adc	r21, r21
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	74 e2       	ldi	r23, 0x24	; 36
     480:	84 ef       	ldi	r24, 0xF4	; 244
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 45 09 	call	0x128a	; 0x128a <__udivmodsi4>
     488:	21 50       	subi	r18, 0x01	; 1
     48a:	31 09       	sbc	r19, r1
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     48c:	88 e1       	ldi	r24, 0x18	; 24
     48e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     492:	86 e0       	ldi	r24, 0x06	; 6
     494:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0L = ubrr_value;
     498:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = (ubrr_value >> 8);
     49c:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     4a0:	08 95       	ret

000004a2 <USART_TxChar>:
}

void USART_TxChar(char data) { //sending single characters to serial plotter
	UDR0 = data;
     4a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	while (!(UCSR0A & (1<<UDRE0)));
     4a6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     4aa:	85 ff       	sbrs	r24, 5
     4ac:	fc cf       	rjmp	.-8      	; 0x4a6 <USART_TxChar+0x4>
}
     4ae:	08 95       	ret

000004b0 <USART_SendString>:

void USART_SendString(char *str) { //sending a full string over to serial
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	8c 01       	movw	r16, r24
	int i = 0;
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
     4bc:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i] != 0) {
     4be:	03 c0       	rjmp	.+6      	; 0x4c6 <USART_SendString+0x16>
		USART_TxChar(str[i]);
     4c0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <USART_TxChar>
		i++;
     4c4:	21 96       	adiw	r28, 0x01	; 1
	while (!(UCSR0A & (1<<UDRE0)));
}

void USART_SendString(char *str) { //sending a full string over to serial
	int i = 0;
	while (str[i] != 0) {
     4c6:	f8 01       	movw	r30, r16
     4c8:	ec 0f       	add	r30, r28
     4ca:	fd 1f       	adc	r31, r29
     4cc:	80 81       	ld	r24, Z
     4ce:	81 11       	cpse	r24, r1
     4d0:	f7 cf       	rjmp	.-18     	; 0x4c0 <USART_SendString+0x10>
		USART_TxChar(str[i]);
		i++;
	}
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	08 95       	ret

000004dc <i2c_init>:

//I2C
void i2c_init(void) { //preparing the i2c pins
	TWSR0 = 0x00;
     4dc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR0 = 0x48; //100khz
     4e0:	88 e4       	ldi	r24, 0x48	; 72
     4e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR0 = (1 << TWEN);
     4e6:	84 e0       	ldi	r24, 0x04	; 4
     4e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4ec:	08 95       	ret

000004ee <i2c_start>:
}

void i2c_start(void) { //starting conversations with device
	TWCR0 = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
     4ee:	84 ea       	ldi	r24, 0xA4	; 164
     4f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1 << TWINT)));
     4f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     4f8:	88 23       	and	r24, r24
     4fa:	e4 f7       	brge	.-8      	; 0x4f4 <i2c_start+0x6>
}
     4fc:	08 95       	ret

000004fe <i2c_stop>:

void i2c_stop(void) { //ending conversations
	TWCR0 = (1 << TWSTO) | (1 << TWEN) | (1 << TWINT);
     4fe:	84 e9       	ldi	r24, 0x94	; 148
     500:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     504:	85 e3       	ldi	r24, 0x35	; 53
     506:	8a 95       	dec	r24
     508:	f1 f7       	brne	.-4      	; 0x506 <i2c_stop+0x8>
     50a:	00 00       	nop
     50c:	08 95       	ret

0000050e <i2c_write>:
	_delay_us(10);
}

void i2c_write(uint8_t data) { //sending byte of data to i2c
	TWDR0 = data;
     50e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR0 = (1 << TWEN) | (1 << TWINT);
     512:	84 e8       	ldi	r24, 0x84	; 132
     514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1 << TWINT)));
     518:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     51c:	88 23       	and	r24, r24
     51e:	e4 f7       	brge	.-8      	; 0x518 <i2c_write+0xa>
}
     520:	08 95       	ret

00000522 <oled_cmd>:
}

//SSD1306 (OLED) functions
#define OLED_ADDR 0x3C

static void oled_cmd(uint8_t c){ //sending command to screen
     522:	cf 93       	push	r28
     524:	c8 2f       	mov	r28, r24
	i2c_start();
     526:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
	i2c_write(OLED_ADDR<<1);
     52a:	88 e7       	ldi	r24, 0x78	; 120
     52c:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_write(0x00);
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_write(c); i2c_stop();
     536:	8c 2f       	mov	r24, r28
     538:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
     53c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <i2c_stop>
}
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <oled_setpos>:
	i2c_write(0x40);
	i2c_write(d);
	i2c_stop();
}

static void oled_setpos(uint8_t col,uint8_t page){ //moving cursor to specific pixel location
     544:	cf 93       	push	r28
     546:	c8 2f       	mov	r28, r24
	oled_cmd(0xB0|page);
     548:	86 2f       	mov	r24, r22
     54a:	80 6b       	ori	r24, 0xB0	; 176
     54c:	0e 94 91 02 	call	0x522	; 0x522 <oled_cmd>
	oled_cmd(0x00|(col&0x0F));
     550:	8c 2f       	mov	r24, r28
     552:	8f 70       	andi	r24, 0x0F	; 15
     554:	0e 94 91 02 	call	0x522	; 0x522 <oled_cmd>
	oled_cmd(0x10|(col>>4));
     558:	8c 2f       	mov	r24, r28
     55a:	82 95       	swap	r24
     55c:	8f 70       	andi	r24, 0x0F	; 15
     55e:	80 61       	ori	r24, 0x10	; 16
     560:	0e 94 91 02 	call	0x522	; 0x522 <oled_cmd>
}
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <oled_data>:
	i2c_write(OLED_ADDR<<1);
	i2c_write(0x00);
	i2c_write(c); i2c_stop();
}

static void oled_data(uint8_t d){ //sending pixel to screen
     568:	cf 93       	push	r28
     56a:	c8 2f       	mov	r28, r24
	i2c_start();
     56c:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
	i2c_write(OLED_ADDR<<1);
     570:	88 e7       	ldi	r24, 0x78	; 120
     572:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_write(0x40);
     576:	80 e4       	ldi	r24, 0x40	; 64
     578:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_write(d);
     57c:	8c 2f       	mov	r24, r28
     57e:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_stop();
     582:	0e 94 7f 02 	call	0x4fe	; 0x4fe <i2c_stop>
}
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <oled_char>:
	{0x00, 0x00, 0x00, 0x63, 0x00, 0x00}, // ¦
	{0x00, 0x00, 0x41, 0x77, 0x08, 0x00}, // }
	{0x00, 0x08, 0x04, 0x08, 0x08, 0x04}  // ~
};

static void oled_char(char c) { //drawing single character on the screen
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
	if (c < 0x20 || c > 0x7E) { //valid ASCII range
     58e:	90 ee       	ldi	r25, 0xE0	; 224
     590:	98 0f       	add	r25, r24
     592:	9f 35       	cpi	r25, 0x5F	; 95
     594:	08 f0       	brcs	.+2      	; 0x598 <oled_char+0xe>
		c = '?'; //replacING invalid with '?'
     596:	8f e3       	ldi	r24, 0x3F	; 63
	}
	uint8_t idx = c - 0x20;  //index into font array
     598:	d0 ee       	ldi	r29, 0xE0	; 224
     59a:	d8 0f       	add	r29, r24

	for (uint8_t i = 0; i < 6; i++) {
     59c:	c0 e0       	ldi	r28, 0x00	; 0
     59e:	11 c0       	rjmp	.+34     	; 0x5c2 <oled_char+0x38>
		oled_data(pgm_read_byte(&ssd1306oled_font[idx][i])); //send each column
     5a0:	2d 2f       	mov	r18, r29
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	f9 01       	movw	r30, r18
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	e2 0f       	add	r30, r18
     5ac:	f3 1f       	adc	r31, r19
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	ec 0f       	add	r30, r28
     5b4:	f1 1d       	adc	r31, r1
     5b6:	e4 52       	subi	r30, 0x24	; 36
     5b8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ba:	84 91       	lpm	r24, Z
     5bc:	0e 94 b4 02 	call	0x568	; 0x568 <oled_data>
	if (c < 0x20 || c > 0x7E) { //valid ASCII range
		c = '?'; //replacING invalid with '?'
	}
	uint8_t idx = c - 0x20;  //index into font array

	for (uint8_t i = 0; i < 6; i++) {
     5c0:	cf 5f       	subi	r28, 0xFF	; 255
     5c2:	c6 30       	cpi	r28, 0x06	; 6
     5c4:	68 f3       	brcs	.-38     	; 0x5a0 <oled_char+0x16>
		oled_data(pgm_read_byte(&ssd1306oled_font[idx][i])); //send each column
	}

	oled_data(0x00); //spacing column after character
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 b4 02 	call	0x568	; 0x568 <oled_data>
}
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <oled_string>:

static void oled_string(const char* s){ //drawing full string of characters
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	ec 01       	movw	r28, r24
	while(*s) oled_char(*s++);
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <oled_string+0xe>
     5da:	21 96       	adiw	r28, 0x01	; 1
     5dc:	0e 94 c5 02 	call	0x58a	; 0x58a <oled_char>
     5e0:	88 81       	ld	r24, Y
     5e2:	81 11       	cpse	r24, r1
     5e4:	fa cf       	rjmp	.-12     	; 0x5da <oled_string+0x8>
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <i2c_read_ack>:
	TWCR0 = (1 << TWEN) | (1 << TWINT);
	while (!(TWCR0 & (1 << TWINT)));
}

uint8_t i2c_read_ack(void) { //reading byte and acknowledges it
	TWCR0 = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
     5ec:	84 ec       	ldi	r24, 0xC4	; 196
     5ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1 << TWINT)));
     5f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5f6:	88 23       	and	r24, r24
     5f8:	e4 f7       	brge	.-8      	; 0x5f2 <i2c_read_ack+0x6>
	return TWDR0;
     5fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     5fe:	08 95       	ret

00000600 <i2c_read_nack>:

uint8_t i2c_read_nack(void) { //reading byte without acknowledging it
	TWCR0 = (1 << TWEN) | (1 << TWINT);
     600:	84 e8       	ldi	r24, 0x84	; 132
     602:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1 << TWINT)));
     606:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     60a:	88 23       	and	r24, r24
     60c:	e4 f7       	brge	.-8      	; 0x606 <i2c_read_nack+0x6>
	return TWDR0;
     60e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     612:	08 95       	ret

00000614 <oled_clear>:

static void oled_string(const char* s){ //drawing full string of characters
	while(*s) oled_char(*s++);
}

void oled_clear(void){ //filling screen with black pixels
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
	for(uint8_t p=0;p<8;p++){
     618:	d0 e0       	ldi	r29, 0x00	; 0
     61a:	0d c0       	rjmp	.+26     	; 0x636 <oled_clear+0x22>
		oled_setpos(0,p); 
     61c:	6d 2f       	mov	r22, r29
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 a2 02 	call	0x544	; 0x544 <oled_setpos>
		for(uint8_t c=0;c<128;c++) 
     624:	c0 e0       	ldi	r28, 0x00	; 0
     626:	04 c0       	rjmp	.+8      	; 0x630 <oled_clear+0x1c>
		oled_data(0); 
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 b4 02 	call	0x568	; 0x568 <oled_data>
}

void oled_clear(void){ //filling screen with black pixels
	for(uint8_t p=0;p<8;p++){
		oled_setpos(0,p); 
		for(uint8_t c=0;c<128;c++) 
     62e:	cf 5f       	subi	r28, 0xFF	; 255
     630:	cc 23       	and	r28, r28
     632:	d4 f7       	brge	.-12     	; 0x628 <oled_clear+0x14>
static void oled_string(const char* s){ //drawing full string of characters
	while(*s) oled_char(*s++);
}

void oled_clear(void){ //filling screen with black pixels
	for(uint8_t p=0;p<8;p++){
     634:	df 5f       	subi	r29, 0xFF	; 255
     636:	d8 30       	cpi	r29, 0x08	; 8
     638:	88 f3       	brcs	.-30     	; 0x61c <oled_clear+0x8>
		oled_setpos(0,p); 
		for(uint8_t c=0;c<128;c++) 
		oled_data(0); 
	}
}
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <oled_init>:

void oled_init(void){ //initializing screen with startup commands
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	69 97       	sbiw	r28, 0x19	; 25
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
	const uint8_t seq[] = {
     656:	89 e1       	ldi	r24, 0x19	; 25
     658:	e4 e0       	ldi	r30, 0x04	; 4
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	de 01       	movw	r26, r28
     65e:	11 96       	adiw	r26, 0x01	; 1
     660:	01 90       	ld	r0, Z+
     662:	0d 92       	st	X+, r0
     664:	8a 95       	dec	r24
     666:	e1 f7       	brne	.-8      	; 0x660 <oled_init+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     668:	2f ef       	ldi	r18, 0xFF	; 255
     66a:	81 ee       	ldi	r24, 0xE1	; 225
     66c:	94 e0       	ldi	r25, 0x04	; 4
     66e:	21 50       	subi	r18, 0x01	; 1
     670:	80 40       	sbci	r24, 0x00	; 0
     672:	90 40       	sbci	r25, 0x00	; 0
     674:	e1 f7       	brne	.-8      	; 0x66e <oled_init+0x2e>
     676:	00 c0       	rjmp	.+0      	; 0x678 <oled_init+0x38>
     678:	00 00       	nop
		0xA4,
		0xA6,
		0xAF
	};
	_delay_ms(100);
	for(uint8_t i=0;i<sizeof(seq);i++)
     67a:	10 e0       	ldi	r17, 0x00	; 0
     67c:	0a c0       	rjmp	.+20     	; 0x692 <oled_init+0x52>
	oled_cmd(seq[i]);
     67e:	e1 e0       	ldi	r30, 0x01	; 1
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	ec 0f       	add	r30, r28
     684:	fd 1f       	adc	r31, r29
     686:	e1 0f       	add	r30, r17
     688:	f1 1d       	adc	r31, r1
     68a:	80 81       	ld	r24, Z
     68c:	0e 94 91 02 	call	0x522	; 0x522 <oled_cmd>
		0xA4,
		0xA6,
		0xAF
	};
	_delay_ms(100);
	for(uint8_t i=0;i<sizeof(seq);i++)
     690:	1f 5f       	subi	r17, 0xFF	; 255
     692:	19 31       	cpi	r17, 0x19	; 25
     694:	a0 f3       	brcs	.-24     	; 0x67e <oled_init+0x3e>
	oled_cmd(seq[i]);
	oled_clear();
     696:	0e 94 0a 03 	call	0x614	; 0x614 <oled_clear>
}
     69a:	69 96       	adiw	r28, 0x19	; 25
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	08 95       	ret

000006ae <bmi160_write>:
//BMI160
#define BMI160_ADDR 0x69 //vcc
int16_t accData[3], gyrData[3]; //storing accelerometer array
float pitch = 0.0f, roll = 0.0f, yaw = 0.0f, dt = 0.01; //holding calculated angles

void bmi160_write(uint8_t reg, uint8_t data) { //sending commands to sensor
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	d8 2f       	mov	r29, r24
     6b4:	c6 2f       	mov	r28, r22
	i2c_start();
     6b6:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
	i2c_write((BMI160_ADDR << 1));
     6ba:	82 ed       	ldi	r24, 0xD2	; 210
     6bc:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_write(reg);
     6c0:	8d 2f       	mov	r24, r29
     6c2:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_write(data);
     6c6:	8c 2f       	mov	r24, r28
     6c8:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_stop();
     6cc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <i2c_stop>
}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <bmi160_read_bytes>:

void bmi160_read_bytes(uint8_t reg, uint8_t *buf, uint8_t len) { //reading data from sensor
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	c8 2f       	mov	r28, r24
     6e4:	7b 01       	movw	r14, r22
     6e6:	d4 2f       	mov	r29, r20
	i2c_start();
     6e8:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
	i2c_write((BMI160_ADDR << 1));
     6ec:	82 ed       	ldi	r24, 0xD2	; 210
     6ee:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_write(reg);
     6f2:	8c 2f       	mov	r24, r28
     6f4:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	i2c_start();
     6f8:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_start>
	i2c_write((BMI160_ADDR << 1) | 1);
     6fc:	83 ed       	ldi	r24, 0xD3	; 211
     6fe:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_write>
	for (uint8_t i = 0; i < len; i++) {
     702:	c0 e0       	ldi	r28, 0x00	; 0
     704:	13 c0       	rjmp	.+38     	; 0x72c <bmi160_read_bytes+0x56>
		buf[i] = (i == len - 1) ? i2c_read_nack() : i2c_read_ack();
     706:	2c 2f       	mov	r18, r28
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	87 01       	movw	r16, r14
     70c:	02 0f       	add	r16, r18
     70e:	13 1f       	adc	r17, r19
     710:	8d 2f       	mov	r24, r29
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	28 17       	cp	r18, r24
     718:	39 07       	cpc	r19, r25
     71a:	19 f4       	brne	.+6      	; 0x722 <bmi160_read_bytes+0x4c>
     71c:	0e 94 00 03 	call	0x600	; 0x600 <i2c_read_nack>
     720:	02 c0       	rjmp	.+4      	; 0x726 <bmi160_read_bytes+0x50>
     722:	0e 94 f6 02 	call	0x5ec	; 0x5ec <i2c_read_ack>
     726:	f8 01       	movw	r30, r16
     728:	80 83       	st	Z, r24
	i2c_start();
	i2c_write((BMI160_ADDR << 1));
	i2c_write(reg);
	i2c_start();
	i2c_write((BMI160_ADDR << 1) | 1);
	for (uint8_t i = 0; i < len; i++) {
     72a:	cf 5f       	subi	r28, 0xFF	; 255
     72c:	cd 17       	cp	r28, r29
     72e:	58 f3       	brcs	.-42     	; 0x706 <bmi160_read_bytes+0x30>
		buf[i] = (i == len - 1) ? i2c_read_nack() : i2c_read_ack();
	}
	i2c_stop();
     730:	0e 94 7f 02 	call	0x4fe	; 0x4fe <i2c_stop>
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	08 95       	ret

00000742 <bmi160_init>:


void bmi160_init(void) { //configuring the sensor
	//reset to ensure clean configuration
	bmi160_write(0x7E, 0xB6);
     742:	66 eb       	ldi	r22, 0xB6	; 182
     744:	8e e7       	ldi	r24, 0x7E	; 126
     746:	0e 94 57 03 	call	0x6ae	; 0x6ae <bmi160_write>
     74a:	2f ef       	ldi	r18, 0xFF	; 255
     74c:	80 e7       	ldi	r24, 0x70	; 112
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	21 50       	subi	r18, 0x01	; 1
     752:	80 40       	sbci	r24, 0x00	; 0
     754:	90 40       	sbci	r25, 0x00	; 0
     756:	e1 f7       	brne	.-8      	; 0x750 <bmi160_init+0xe>
     758:	00 c0       	rjmp	.+0      	; 0x75a <bmi160_init+0x18>
     75a:	00 00       	nop
	_delay_ms(50);
	
	//configuring accelerometer (100hz ODR, +-2g)
	bmi160_write(0x40, 0x2A);  //ODR 100Hz, normal mode
     75c:	6a e2       	ldi	r22, 0x2A	; 42
     75e:	80 e4       	ldi	r24, 0x40	; 64
     760:	0e 94 57 03 	call	0x6ae	; 0x6ae <bmi160_write>
	bmi160_write(0x41, 0x03);  //+-2g range
     764:	63 e0       	ldi	r22, 0x03	; 3
     766:	81 e4       	ldi	r24, 0x41	; 65
     768:	0e 94 57 03 	call	0x6ae	; 0x6ae <bmi160_write>
	
	//configuring gyroscope (100hz ODR, +-2000dps)
	bmi160_write(0x42, 0x1A); // ODR 100Hz, Normal mode
     76c:	6a e1       	ldi	r22, 0x1A	; 26
     76e:	82 e4       	ldi	r24, 0x42	; 66
     770:	0e 94 57 03 	call	0x6ae	; 0x6ae <bmi160_write>
	bmi160_write(0x43, 0x00); //+-2000dps range
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	83 e4       	ldi	r24, 0x43	; 67
     778:	0e 94 57 03 	call	0x6ae	; 0x6ae <bmi160_write>
	
	//powering on sensors
	bmi160_write(0x7E, 0x11); //accel normal mode
     77c:	61 e1       	ldi	r22, 0x11	; 17
     77e:	8e e7       	ldi	r24, 0x7E	; 126
     780:	0e 94 57 03 	call	0x6ae	; 0x6ae <bmi160_write>
     784:	2f ef       	ldi	r18, 0xFF	; 255
     786:	80 e7       	ldi	r24, 0x70	; 112
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	21 50       	subi	r18, 0x01	; 1
     78c:	80 40       	sbci	r24, 0x00	; 0
     78e:	90 40       	sbci	r25, 0x00	; 0
     790:	e1 f7       	brne	.-8      	; 0x78a <bmi160_init+0x48>
     792:	00 c0       	rjmp	.+0      	; 0x794 <bmi160_init+0x52>
     794:	00 00       	nop
	_delay_ms(50);
	bmi160_write(0x7E, 0x15); //gyro normal mode
     796:	65 e1       	ldi	r22, 0x15	; 21
     798:	8e e7       	ldi	r24, 0x7E	; 126
     79a:	0e 94 57 03 	call	0x6ae	; 0x6ae <bmi160_write>
     79e:	2f ef       	ldi	r18, 0xFF	; 255
     7a0:	80 e7       	ldi	r24, 0x70	; 112
     7a2:	92 e0       	ldi	r25, 0x02	; 2
     7a4:	21 50       	subi	r18, 0x01	; 1
     7a6:	80 40       	sbci	r24, 0x00	; 0
     7a8:	90 40       	sbci	r25, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <bmi160_init+0x62>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <bmi160_init+0x6c>
     7ae:	00 00       	nop
     7b0:	08 95       	ret

000007b2 <bmi160_read_raw>:
	_delay_ms(50);
}

void bmi160_read_raw(void) { //reading accelerometer and gyro data to accData/gyrData
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	2c 97       	sbiw	r28, 0x0c	; 12
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[12];
	bmi160_read_bytes(0x0C, data, 12);
     7c6:	4c e0       	ldi	r20, 0x0C	; 12
     7c8:	be 01       	movw	r22, r28
     7ca:	6f 5f       	subi	r22, 0xFF	; 255
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	8c e0       	ldi	r24, 0x0C	; 12
     7d0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <bmi160_read_bytes>
	for (int i = 0; i < 3; i++) {
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	37 c0       	rjmp	.+110    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		gyrData[i] = (int16_t)((data[i * 2 + 1] << 8) | data[i * 2]);
     7da:	ca 01       	movw	r24, r20
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	fc 01       	movw	r30, r24
     7e2:	31 96       	adiw	r30, 0x01	; 1
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	2c 0f       	add	r18, r28
     7ea:	3d 1f       	adc	r19, r29
     7ec:	e2 0f       	add	r30, r18
     7ee:	f3 1f       	adc	r31, r19
     7f0:	20 81       	ld	r18, Z
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	32 2f       	mov	r19, r18
     7f6:	22 27       	eor	r18, r18
     7f8:	e1 e0       	ldi	r30, 0x01	; 1
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	ec 0f       	add	r30, r28
     7fe:	fd 1f       	adc	r31, r29
     800:	e8 0f       	add	r30, r24
     802:	f9 1f       	adc	r31, r25
     804:	60 81       	ld	r22, Z
     806:	26 2b       	or	r18, r22
     808:	fc 01       	movw	r30, r24
     80a:	ec 57       	subi	r30, 0x7C	; 124
     80c:	fe 4f       	sbci	r31, 0xFE	; 254
     80e:	31 83       	std	Z+1, r19	; 0x01
     810:	20 83       	st	Z, r18
		accData[i] = (int16_t)((data[i * 2 + 7] << 8) | data[i * 2 + 6]);
     812:	fc 01       	movw	r30, r24
     814:	37 96       	adiw	r30, 0x07	; 7
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	6c 0f       	add	r22, r28
     81c:	7d 1f       	adc	r23, r29
     81e:	e6 0f       	add	r30, r22
     820:	f7 1f       	adc	r31, r23
     822:	20 81       	ld	r18, Z
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	32 2f       	mov	r19, r18
     828:	22 27       	eor	r18, r18
     82a:	fa 01       	movw	r30, r20
     82c:	33 96       	adiw	r30, 0x03	; 3
     82e:	ee 0f       	add	r30, r30
     830:	ff 1f       	adc	r31, r31
     832:	e6 0f       	add	r30, r22
     834:	f7 1f       	adc	r31, r23
     836:	60 81       	ld	r22, Z
     838:	26 2b       	or	r18, r22
     83a:	fc 01       	movw	r30, r24
     83c:	e6 57       	subi	r30, 0x76	; 118
     83e:	fe 4f       	sbci	r31, 0xFE	; 254
     840:	31 83       	std	Z+1, r19	; 0x01
     842:	20 83       	st	Z, r18
}

void bmi160_read_raw(void) { //reading accelerometer and gyro data to accData/gyrData
	uint8_t data[12];
	bmi160_read_bytes(0x0C, data, 12);
	for (int i = 0; i < 3; i++) {
     844:	4f 5f       	subi	r20, 0xFF	; 255
     846:	5f 4f       	sbci	r21, 0xFF	; 255
     848:	43 30       	cpi	r20, 0x03	; 3
     84a:	51 05       	cpc	r21, r1
     84c:	34 f2       	brlt	.-116    	; 0x7da <bmi160_read_raw+0x28>
		gyrData[i] = (int16_t)((data[i * 2 + 1] << 8) | data[i * 2]);
		accData[i] = (int16_t)((data[i * 2 + 7] << 8) | data[i * 2 + 6]);
	}
}
     84e:	2c 96       	adiw	r28, 0x0c	; 12
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	08 95       	ret

00000860 <complementary_filter>:

void complementary_filter(void) { //converting raw accelometer data to g forces
     860:	4f 92       	push	r4
     862:	5f 92       	push	r5
     864:	6f 92       	push	r6
     866:	7f 92       	push	r7
     868:	8f 92       	push	r8
     86a:	9f 92       	push	r9
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	28 97       	sbiw	r28, 0x08	; 8
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
	//converting raw accelerometer data to g's
	float ax = accData[0] / ACCEL_SCALE;
     88c:	ea e8       	ldi	r30, 0x8A	; 138
     88e:	f1 e0       	ldi	r31, 0x01	; 1
     890:	60 81       	ld	r22, Z
     892:	71 81       	ldd	r23, Z+1	; 0x01
     894:	07 2e       	mov	r0, r23
     896:	00 0c       	add	r0, r0
     898:	88 0b       	sbc	r24, r24
     89a:	99 0b       	sbc	r25, r25
     89c:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e8       	ldi	r20, 0x80	; 128
     8a6:	58 e3       	ldi	r21, 0x38	; 56
     8a8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     8ac:	4b 01       	movw	r8, r22
     8ae:	5c 01       	movw	r10, r24
	float ay = accData[1] / ACCEL_SCALE;
     8b0:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <accData+0x2>
     8b4:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <accData+0x3>
     8b8:	07 2e       	mov	r0, r23
     8ba:	00 0c       	add	r0, r0
     8bc:	88 0b       	sbc	r24, r24
     8be:	99 0b       	sbc	r25, r25
     8c0:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e8       	ldi	r20, 0x80	; 128
     8ca:	58 e3       	ldi	r21, 0x38	; 56
     8cc:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     8d0:	2b 01       	movw	r4, r22
     8d2:	3c 01       	movw	r6, r24
	float az = accData[2] / ACCEL_SCALE;
     8d4:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <accData+0x4>
     8d8:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <accData+0x5>
     8dc:	07 2e       	mov	r0, r23
     8de:	00 0c       	add	r0, r0
     8e0:	88 0b       	sbc	r24, r24
     8e2:	99 0b       	sbc	r25, r25
     8e4:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e8       	ldi	r20, 0x80	; 128
     8ee:	58 e3       	ldi	r21, 0x38	; 56
     8f0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     8f4:	6b 01       	movw	r12, r22
     8f6:	7c 01       	movw	r14, r24
	
	//calculating angles from accelerometer
	float accPitch = atan2f(ay, az) * 180 / M_PI; //pitch angle from gravity
     8f8:	9b 01       	movw	r18, r22
     8fa:	ac 01       	movw	r20, r24
     8fc:	c3 01       	movw	r24, r6
     8fe:	b2 01       	movw	r22, r4
     900:	0e 94 46 07 	call	0xe8c	; 0xe8c <atan2>
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	44 e3       	ldi	r20, 0x34	; 52
     90a:	53 e4       	ldi	r21, 0x43	; 67
     90c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     910:	2b ed       	ldi	r18, 0xDB	; 219
     912:	3f e0       	ldi	r19, 0x0F	; 15
     914:	49 e4       	ldi	r20, 0x49	; 73
     916:	50 e4       	ldi	r21, 0x40	; 64
     918:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divsf3>
     91c:	2b 01       	movw	r4, r22
     91e:	3c 01       	movw	r6, r24
	float accRoll = atan2f(ax, az) * 180 / M_PI; //roll angle from gravity
     920:	a7 01       	movw	r20, r14
     922:	96 01       	movw	r18, r12
     924:	c5 01       	movw	r24, r10
     926:	b4 01       	movw	r22, r8
     928:	0e 94 46 07 	call	0xe8c	; 0xe8c <atan2>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	44 e3       	ldi	r20, 0x34	; 52
     932:	53 e4       	ldi	r21, 0x43	; 67
     934:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     938:	2b ed       	ldi	r18, 0xDB	; 219
     93a:	3f e0       	ldi	r19, 0x0F	; 15
     93c:	49 e4       	ldi	r20, 0x49	; 73
     93e:	50 e4       	ldi	r21, 0x40	; 64
     940:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divsf3>
     944:	69 83       	std	Y+1, r22	; 0x01
     946:	7a 83       	std	Y+2, r23	; 0x02
     948:	8b 83       	std	Y+3, r24	; 0x03
     94a:	9c 83       	std	Y+4, r25	; 0x04
	
	//gyro data to dps and integrating
	pitch += (gyrData[0] / GYRO_SCALE) * dt; //updating pitch using gyro
     94c:	e4 e8       	ldi	r30, 0x84	; 132
     94e:	f1 e0       	ldi	r31, 0x01	; 1
     950:	60 81       	ld	r22, Z
     952:	71 81       	ldd	r23, Z+1	; 0x01
     954:	07 2e       	mov	r0, r23
     956:	00 0c       	add	r0, r0
     958:	88 0b       	sbc	r24, r24
     95a:	99 0b       	sbc	r25, r25
     95c:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     960:	23 e3       	ldi	r18, 0x33	; 51
     962:	33 e3       	ldi	r19, 0x33	; 51
     964:	43 e8       	ldi	r20, 0x83	; 131
     966:	51 e4       	ldi	r21, 0x41	; 65
     968:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divsf3>
     96c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     970:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     974:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     978:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     97c:	a7 01       	movw	r20, r14
     97e:	96 01       	movw	r18, r12
     980:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     984:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <pitch>
     988:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <pitch+0x1>
     98c:	40 91 82 01 	lds	r20, 0x0182	; 0x800182 <pitch+0x2>
     990:	50 91 83 01 	lds	r21, 0x0183	; 0x800183 <pitch+0x3>
     994:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__addsf3>
     998:	4b 01       	movw	r8, r22
     99a:	5c 01       	movw	r10, r24
	roll -= (gyrData[1] / GYRO_SCALE) * dt; //same for roll
     99c:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <gyrData+0x2>
     9a0:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <gyrData+0x3>
     9a4:	07 2e       	mov	r0, r23
     9a6:	00 0c       	add	r0, r0
     9a8:	88 0b       	sbc	r24, r24
     9aa:	99 0b       	sbc	r25, r25
     9ac:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     9b0:	23 e3       	ldi	r18, 0x33	; 51
     9b2:	33 e3       	ldi	r19, 0x33	; 51
     9b4:	43 e8       	ldi	r20, 0x83	; 131
     9b6:	51 e4       	ldi	r21, 0x41	; 65
     9b8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divsf3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	c7 01       	movw	r24, r14
     9c2:	b6 01       	movw	r22, r12
     9c4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     9c8:	9b 01       	movw	r18, r22
     9ca:	ac 01       	movw	r20, r24
     9cc:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <roll>
     9d0:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <roll+0x1>
     9d4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <roll+0x2>
     9d8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <roll+0x3>
     9dc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__subsf3>
     9e0:	6d 83       	std	Y+5, r22	; 0x05
     9e2:	7e 83       	std	Y+6, r23	; 0x06
     9e4:	8f 83       	std	Y+7, r24	; 0x07
     9e6:	98 87       	std	Y+8, r25	; 0x08
	yaw += (gyrData[2] / GYRO_SCALE) * dt; //same for yaw
     9e8:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <gyrData+0x4>
     9ec:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <gyrData+0x5>
     9f0:	07 2e       	mov	r0, r23
     9f2:	00 0c       	add	r0, r0
     9f4:	88 0b       	sbc	r24, r24
     9f6:	99 0b       	sbc	r25, r25
     9f8:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     9fc:	23 e3       	ldi	r18, 0x33	; 51
     9fe:	33 e3       	ldi	r19, 0x33	; 51
     a00:	43 e8       	ldi	r20, 0x83	; 131
     a02:	51 e4       	ldi	r21, 0x41	; 65
     a04:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divsf3>
     a08:	9b 01       	movw	r18, r22
     a0a:	ac 01       	movw	r20, r24
     a0c:	c7 01       	movw	r24, r14
     a0e:	b6 01       	movw	r22, r12
     a10:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <__data_end>
     a1c:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <__data_end+0x1>
     a20:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end+0x2>
     a24:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x3>
     a28:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__addsf3>
     a2c:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <__data_end>
     a30:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <__data_end+0x1>
     a34:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__data_end+0x2>
     a38:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__data_end+0x3>
	
	//mixing accelerometer and gyro data
	pitch = pitch * 0.98f + accPitch * 0.02f; //98% for gyro, 2% for acceleormeter
     a3c:	28 e4       	ldi	r18, 0x48	; 72
     a3e:	31 ee       	ldi	r19, 0xE1	; 225
     a40:	4a e7       	ldi	r20, 0x7A	; 122
     a42:	5f e3       	ldi	r21, 0x3F	; 63
     a44:	c5 01       	movw	r24, r10
     a46:	b4 01       	movw	r22, r8
     a48:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     a4c:	4b 01       	movw	r8, r22
     a4e:	5c 01       	movw	r10, r24
     a50:	2a e0       	ldi	r18, 0x0A	; 10
     a52:	37 ed       	ldi	r19, 0xD7	; 215
     a54:	43 ea       	ldi	r20, 0xA3	; 163
     a56:	5c e3       	ldi	r21, 0x3C	; 60
     a58:	c3 01       	movw	r24, r6
     a5a:	b2 01       	movw	r22, r4
     a5c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     a60:	9b 01       	movw	r18, r22
     a62:	ac 01       	movw	r20, r24
     a64:	c5 01       	movw	r24, r10
     a66:	b4 01       	movw	r22, r8
     a68:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__addsf3>
     a6c:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <pitch>
     a70:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <pitch+0x1>
     a74:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <pitch+0x2>
     a78:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <pitch+0x3>
	roll = roll * 0.98f + accRoll * 0.02f; //same for roll
     a7c:	28 e4       	ldi	r18, 0x48	; 72
     a7e:	31 ee       	ldi	r19, 0xE1	; 225
     a80:	4a e7       	ldi	r20, 0x7A	; 122
     a82:	5f e3       	ldi	r21, 0x3F	; 63
     a84:	6d 81       	ldd	r22, Y+5	; 0x05
     a86:	7e 81       	ldd	r23, Y+6	; 0x06
     a88:	8f 81       	ldd	r24, Y+7	; 0x07
     a8a:	98 85       	ldd	r25, Y+8	; 0x08
     a8c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     a90:	6b 01       	movw	r12, r22
     a92:	7c 01       	movw	r14, r24
     a94:	2a e0       	ldi	r18, 0x0A	; 10
     a96:	37 ed       	ldi	r19, 0xD7	; 215
     a98:	43 ea       	ldi	r20, 0xA3	; 163
     a9a:	5c e3       	ldi	r21, 0x3C	; 60
     a9c:	69 81       	ldd	r22, Y+1	; 0x01
     a9e:	7a 81       	ldd	r23, Y+2	; 0x02
     aa0:	8b 81       	ldd	r24, Y+3	; 0x03
     aa2:	9c 81       	ldd	r25, Y+4	; 0x04
     aa4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
     aac:	c7 01       	movw	r24, r14
     aae:	b6 01       	movw	r22, r12
     ab0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__addsf3>
     ab4:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <roll>
     ab8:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <roll+0x1>
     abc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <roll+0x2>
     ac0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <roll+0x3>
}
     ac4:	28 96       	adiw	r28, 0x08	; 8
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	7f 90       	pop	r7
     ae6:	6f 90       	pop	r6
     ae8:	5f 90       	pop	r5
     aea:	4f 90       	pop	r4
     aec:	08 95       	ret

00000aee <main>:

//MAIN
int main(void) {
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	a0 97       	sbiw	r28, 0x20	; 32
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
	char buffer[32]; //temporary string to hold numbers
	i2c_init(); //i2c communication
     b02:	0e 94 6e 02 	call	0x4dc	; 0x4dc <i2c_init>
	USART_Init(9600);
     b06:	60 e8       	ldi	r22, 0x80	; 128
     b08:	75 e2       	ldi	r23, 0x25	; 37
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 2a 02 	call	0x454	; 0x454 <USART_Init>
	oled_init(); //turning on screen
     b12:	0e 94 20 03 	call	0x640	; 0x640 <oled_init>
	oled_clear(); //clearing the screen
     b16:	0e 94 0a 03 	call	0x614	; 0x614 <oled_clear>
	
	//static labels once during setup
	oled_setpos(0, 0); //moving cursor to top left
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 a2 02 	call	0x544	; 0x544 <oled_setpos>
	oled_string("Pitch:"); //writing pitch on the screen
     b22:	8d e1       	ldi	r24, 0x1D	; 29
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <oled_string>
	oled_setpos(0, 2); //moving cursor to middle left
     b2a:	62 e0       	ldi	r22, 0x02	; 2
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	0e 94 a2 02 	call	0x544	; 0x544 <oled_setpos>
	oled_string("Roll:"); //writing roll
     b32:	84 e2       	ldi	r24, 0x24	; 36
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <oled_string>
	oled_setpos(0, 4); //moving cursor to bottom left
     b3a:	64 e0       	ldi	r22, 0x04	; 4
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 a2 02 	call	0x544	; 0x544 <oled_setpos>
	oled_string("Yaw:"); //writing yaw
     b42:	8a e2       	ldi	r24, 0x2A	; 42
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <oled_string>
     b4a:	2f ef       	ldi	r18, 0xFF	; 255
     b4c:	89 e6       	ldi	r24, 0x69	; 105
     b4e:	98 e1       	ldi	r25, 0x18	; 24
     b50:	21 50       	subi	r18, 0x01	; 1
     b52:	80 40       	sbci	r24, 0x00	; 0
     b54:	90 40       	sbci	r25, 0x00	; 0
     b56:	e1 f7       	brne	.-8      	; 0xb50 <main+0x62>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <main+0x6c>
     b5a:	00 00       	nop
	
	_delay_ms(500); //waiting for stability
	bmi160_init(); //configuring the motion sensor
     b5c:	0e 94 a1 03 	call	0x742	; 0x742 <bmi160_init>

	while (1) {
		bmi160_read_raw(); //looping forever
     b60:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <bmi160_read_raw>
		complementary_filter(); //calculating pitch/roll/yaw
     b64:	0e 94 30 04 	call	0x860	; 0x860 <complementary_filter>

		//UART output for pitch, roll and yaw
		USART_SendString("Pitch: ");
     b68:	8f e2       	ldi	r24, 0x2F	; 47
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		dtostrf(pitch, 6, 2, buffer);
     b70:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <pitch>
     b74:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <pitch+0x1>
     b78:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <pitch+0x2>
     b7c:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <pitch+0x3>
     b80:	8e 01       	movw	r16, r28
     b82:	0f 5f       	subi	r16, 0xFF	; 255
     b84:	1f 4f       	sbci	r17, 0xFF	; 255
     b86:	22 e0       	ldi	r18, 0x02	; 2
     b88:	46 e0       	ldi	r20, 0x06	; 6
     b8a:	0e 94 67 09 	call	0x12ce	; 0x12ce <dtostrf>
		USART_SendString(buffer);
     b8e:	c8 01       	movw	r24, r16
     b90:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		USART_SendString("\t\t");
     b94:	87 e3       	ldi	r24, 0x37	; 55
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		
		USART_SendString("Roll: ");
     b9c:	8a e3       	ldi	r24, 0x3A	; 58
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		dtostrf(roll, 6, 2, buffer);
     ba4:	60 91 7c 01 	lds	r22, 0x017C	; 0x80017c <roll>
     ba8:	70 91 7d 01 	lds	r23, 0x017D	; 0x80017d <roll+0x1>
     bac:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <roll+0x2>
     bb0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <roll+0x3>
     bb4:	22 e0       	ldi	r18, 0x02	; 2
     bb6:	46 e0       	ldi	r20, 0x06	; 6
     bb8:	0e 94 67 09 	call	0x12ce	; 0x12ce <dtostrf>
		USART_SendString(buffer);
     bbc:	c8 01       	movw	r24, r16
     bbe:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		USART_SendString("\t\t");
     bc2:	87 e3       	ldi	r24, 0x37	; 55
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		
		USART_SendString("Yaw: ");
     bca:	81 e4       	ldi	r24, 0x41	; 65
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		dtostrf(yaw, 6, 2, buffer);
     bd2:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <__data_end>
     bd6:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <__data_end+0x1>
     bda:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__data_end+0x2>
     bde:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__data_end+0x3>
     be2:	22 e0       	ldi	r18, 0x02	; 2
     be4:	46 e0       	ldi	r20, 0x06	; 6
     be6:	0e 94 67 09 	call	0x12ce	; 0x12ce <dtostrf>
		USART_SendString(buffer);
     bea:	c8 01       	movw	r24, r16
     bec:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		USART_SendString("\r\n");
     bf0:	87 e4       	ldi	r24, 0x47	; 71
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		
		//sending acc data
		USART_SendString("AccX: ");
     bf8:	8a e4       	ldi	r24, 0x4A	; 74
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		dtostrf(accData[0]/ACCEL_SCALE, 6, 2, buffer);
     c00:	0f 2e       	mov	r0, r31
     c02:	fa e8       	ldi	r31, 0x8A	; 138
     c04:	ef 2e       	mov	r14, r31
     c06:	f1 e0       	ldi	r31, 0x01	; 1
     c08:	ff 2e       	mov	r15, r31
     c0a:	f0 2d       	mov	r31, r0
     c0c:	f7 01       	movw	r30, r14
     c0e:	60 81       	ld	r22, Z
     c10:	71 81       	ldd	r23, Z+1	; 0x01
     c12:	07 2e       	mov	r0, r23
     c14:	00 0c       	add	r0, r0
     c16:	88 0b       	sbc	r24, r24
     c18:	99 0b       	sbc	r25, r25
     c1a:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e8       	ldi	r20, 0x80	; 128
     c24:	58 e3       	ldi	r21, 0x38	; 56
     c26:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     c2a:	22 e0       	ldi	r18, 0x02	; 2
     c2c:	46 e0       	ldi	r20, 0x06	; 6
     c2e:	0e 94 67 09 	call	0x12ce	; 0x12ce <dtostrf>
		USART_SendString(buffer);
     c32:	c8 01       	movw	r24, r16
     c34:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		USART_SendString("\t\t");
     c38:	87 e3       	ldi	r24, 0x37	; 55
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		
		USART_SendString("AccY: ");
     c40:	81 e5       	ldi	r24, 0x51	; 81
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		dtostrf(accData[1]/ACCEL_SCALE, 6, 2, buffer);
     c48:	f7 01       	movw	r30, r14
     c4a:	62 81       	ldd	r22, Z+2	; 0x02
     c4c:	73 81       	ldd	r23, Z+3	; 0x03
     c4e:	07 2e       	mov	r0, r23
     c50:	00 0c       	add	r0, r0
     c52:	88 0b       	sbc	r24, r24
     c54:	99 0b       	sbc	r25, r25
     c56:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e8       	ldi	r20, 0x80	; 128
     c60:	58 e3       	ldi	r21, 0x38	; 56
     c62:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     c66:	22 e0       	ldi	r18, 0x02	; 2
     c68:	46 e0       	ldi	r20, 0x06	; 6
     c6a:	0e 94 67 09 	call	0x12ce	; 0x12ce <dtostrf>
		USART_SendString(buffer);
     c6e:	c8 01       	movw	r24, r16
     c70:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		USART_SendString("\t\t");
     c74:	87 e3       	ldi	r24, 0x37	; 55
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		
		USART_SendString("AccZ: ");
     c7c:	88 e5       	ldi	r24, 0x58	; 88
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		dtostrf(accData[2]/ACCEL_SCALE, 6, 2, buffer);
     c84:	f7 01       	movw	r30, r14
     c86:	64 81       	ldd	r22, Z+4	; 0x04
     c88:	75 81       	ldd	r23, Z+5	; 0x05
     c8a:	07 2e       	mov	r0, r23
     c8c:	00 0c       	add	r0, r0
     c8e:	88 0b       	sbc	r24, r24
     c90:	99 0b       	sbc	r25, r25
     c92:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e8       	ldi	r20, 0x80	; 128
     c9c:	58 e3       	ldi	r21, 0x38	; 56
     c9e:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     ca2:	22 e0       	ldi	r18, 0x02	; 2
     ca4:	46 e0       	ldi	r20, 0x06	; 6
     ca6:	0e 94 67 09 	call	0x12ce	; 0x12ce <dtostrf>
		USART_SendString(buffer);
     caa:	c8 01       	movw	r24, r16
     cac:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		USART_SendString("\r\n");
     cb0:	87 e4       	ldi	r24, 0x47	; 71
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		
		//sending Gyro data
		USART_SendString("GyroX: ");
     cb8:	8f e5       	ldi	r24, 0x5F	; 95
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		dtostrf(gyrData[0]/GYRO_SCALE, 6, 2, buffer);
     cc0:	0f 2e       	mov	r0, r31
     cc2:	f4 e8       	ldi	r31, 0x84	; 132
     cc4:	ef 2e       	mov	r14, r31
     cc6:	f1 e0       	ldi	r31, 0x01	; 1
     cc8:	ff 2e       	mov	r15, r31
     cca:	f0 2d       	mov	r31, r0
     ccc:	f7 01       	movw	r30, r14
     cce:	60 81       	ld	r22, Z
     cd0:	71 81       	ldd	r23, Z+1	; 0x01
     cd2:	07 2e       	mov	r0, r23
     cd4:	00 0c       	add	r0, r0
     cd6:	88 0b       	sbc	r24, r24
     cd8:	99 0b       	sbc	r25, r25
     cda:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     cde:	23 e3       	ldi	r18, 0x33	; 51
     ce0:	33 e3       	ldi	r19, 0x33	; 51
     ce2:	43 e8       	ldi	r20, 0x83	; 131
     ce4:	51 e4       	ldi	r21, 0x41	; 65
     ce6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divsf3>
     cea:	22 e0       	ldi	r18, 0x02	; 2
     cec:	46 e0       	ldi	r20, 0x06	; 6
     cee:	0e 94 67 09 	call	0x12ce	; 0x12ce <dtostrf>
		USART_SendString(buffer);
     cf2:	c8 01       	movw	r24, r16
     cf4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		USART_SendString("\t\t");
     cf8:	87 e3       	ldi	r24, 0x37	; 55
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		
		USART_SendString("GyroY: ");
     d00:	87 e6       	ldi	r24, 0x67	; 103
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		dtostrf(gyrData[1]/GYRO_SCALE, 6, 2, buffer);
     d08:	f7 01       	movw	r30, r14
     d0a:	62 81       	ldd	r22, Z+2	; 0x02
     d0c:	73 81       	ldd	r23, Z+3	; 0x03
     d0e:	07 2e       	mov	r0, r23
     d10:	00 0c       	add	r0, r0
     d12:	88 0b       	sbc	r24, r24
     d14:	99 0b       	sbc	r25, r25
     d16:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     d1a:	23 e3       	ldi	r18, 0x33	; 51
     d1c:	33 e3       	ldi	r19, 0x33	; 51
     d1e:	43 e8       	ldi	r20, 0x83	; 131
     d20:	51 e4       	ldi	r21, 0x41	; 65
     d22:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divsf3>
     d26:	22 e0       	ldi	r18, 0x02	; 2
     d28:	46 e0       	ldi	r20, 0x06	; 6
     d2a:	0e 94 67 09 	call	0x12ce	; 0x12ce <dtostrf>
		USART_SendString(buffer);
     d2e:	c8 01       	movw	r24, r16
     d30:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		USART_SendString("\t\t");
     d34:	87 e3       	ldi	r24, 0x37	; 55
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		
		USART_SendString("GyroZ: ");
     d3c:	8f e6       	ldi	r24, 0x6F	; 111
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		dtostrf(gyrData[2]/GYRO_SCALE, 6, 2, buffer);
     d44:	f7 01       	movw	r30, r14
     d46:	64 81       	ldd	r22, Z+4	; 0x04
     d48:	75 81       	ldd	r23, Z+5	; 0x05
     d4a:	07 2e       	mov	r0, r23
     d4c:	00 0c       	add	r0, r0
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 94 19 08 	call	0x1032	; 0x1032 <__floatsisf>
     d56:	23 e3       	ldi	r18, 0x33	; 51
     d58:	33 e3       	ldi	r19, 0x33	; 51
     d5a:	43 e8       	ldi	r20, 0x83	; 131
     d5c:	51 e4       	ldi	r21, 0x41	; 65
     d5e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divsf3>
     d62:	22 e0       	ldi	r18, 0x02	; 2
     d64:	46 e0       	ldi	r20, 0x06	; 6
     d66:	0e 94 67 09 	call	0x12ce	; 0x12ce <dtostrf>
		USART_SendString(buffer);
     d6a:	c8 01       	movw	r24, r16
     d6c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
		USART_SendString("\r\n");
     d70:	87 e4       	ldi	r24, 0x47	; 71
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 58 02 	call	0x4b0	; 0x4b0 <USART_SendString>
     d78:	ff ef       	ldi	r31, 0xFF	; 255
     d7a:	21 ee       	ldi	r18, 0xE1	; 225
     d7c:	84 e0       	ldi	r24, 0x04	; 4
     d7e:	f1 50       	subi	r31, 0x01	; 1
     d80:	20 40       	sbci	r18, 0x00	; 0
     d82:	80 40       	sbci	r24, 0x00	; 0
     d84:	e1 f7       	brne	.-8      	; 0xd7e <main+0x290>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <main+0x29a>
     d88:	00 00       	nop
     d8a:	ea ce       	rjmp	.-556    	; 0xb60 <main+0x72>

00000d8c <__subsf3>:
     d8c:	50 58       	subi	r21, 0x80	; 128

00000d8e <__addsf3>:
     d8e:	bb 27       	eor	r27, r27
     d90:	aa 27       	eor	r26, r26
     d92:	0e 94 de 06 	call	0xdbc	; 0xdbc <__addsf3x>
     d96:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_round>
     d9a:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_pscA>
     d9e:	38 f0       	brcs	.+14     	; 0xdae <__addsf3+0x20>
     da0:	0e 94 8b 08 	call	0x1116	; 0x1116 <__fp_pscB>
     da4:	20 f0       	brcs	.+8      	; 0xdae <__addsf3+0x20>
     da6:	39 f4       	brne	.+14     	; 0xdb6 <__addsf3+0x28>
     da8:	9f 3f       	cpi	r25, 0xFF	; 255
     daa:	19 f4       	brne	.+6      	; 0xdb2 <__addsf3+0x24>
     dac:	26 f4       	brtc	.+8      	; 0xdb6 <__addsf3+0x28>
     dae:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>
     db2:	0e f4       	brtc	.+2      	; 0xdb6 <__addsf3+0x28>
     db4:	e0 95       	com	r30
     db6:	e7 fb       	bst	r30, 7
     db8:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>

00000dbc <__addsf3x>:
     dbc:	e9 2f       	mov	r30, r25
     dbe:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_split3>
     dc2:	58 f3       	brcs	.-42     	; 0xd9a <__addsf3+0xc>
     dc4:	ba 17       	cp	r27, r26
     dc6:	62 07       	cpc	r22, r18
     dc8:	73 07       	cpc	r23, r19
     dca:	84 07       	cpc	r24, r20
     dcc:	95 07       	cpc	r25, r21
     dce:	20 f0       	brcs	.+8      	; 0xdd8 <__addsf3x+0x1c>
     dd0:	79 f4       	brne	.+30     	; 0xdf0 <__addsf3x+0x34>
     dd2:	a6 f5       	brtc	.+104    	; 0xe3c <__addsf3x+0x80>
     dd4:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_zero>
     dd8:	0e f4       	brtc	.+2      	; 0xddc <__addsf3x+0x20>
     dda:	e0 95       	com	r30
     ddc:	0b 2e       	mov	r0, r27
     dde:	ba 2f       	mov	r27, r26
     de0:	a0 2d       	mov	r26, r0
     de2:	0b 01       	movw	r0, r22
     de4:	b9 01       	movw	r22, r18
     de6:	90 01       	movw	r18, r0
     de8:	0c 01       	movw	r0, r24
     dea:	ca 01       	movw	r24, r20
     dec:	a0 01       	movw	r20, r0
     dee:	11 24       	eor	r1, r1
     df0:	ff 27       	eor	r31, r31
     df2:	59 1b       	sub	r21, r25
     df4:	99 f0       	breq	.+38     	; 0xe1c <__addsf3x+0x60>
     df6:	59 3f       	cpi	r21, 0xF9	; 249
     df8:	50 f4       	brcc	.+20     	; 0xe0e <__addsf3x+0x52>
     dfa:	50 3e       	cpi	r21, 0xE0	; 224
     dfc:	68 f1       	brcs	.+90     	; 0xe58 <__addsf3x+0x9c>
     dfe:	1a 16       	cp	r1, r26
     e00:	f0 40       	sbci	r31, 0x00	; 0
     e02:	a2 2f       	mov	r26, r18
     e04:	23 2f       	mov	r18, r19
     e06:	34 2f       	mov	r19, r20
     e08:	44 27       	eor	r20, r20
     e0a:	58 5f       	subi	r21, 0xF8	; 248
     e0c:	f3 cf       	rjmp	.-26     	; 0xdf4 <__addsf3x+0x38>
     e0e:	46 95       	lsr	r20
     e10:	37 95       	ror	r19
     e12:	27 95       	ror	r18
     e14:	a7 95       	ror	r26
     e16:	f0 40       	sbci	r31, 0x00	; 0
     e18:	53 95       	inc	r21
     e1a:	c9 f7       	brne	.-14     	; 0xe0e <__addsf3x+0x52>
     e1c:	7e f4       	brtc	.+30     	; 0xe3c <__addsf3x+0x80>
     e1e:	1f 16       	cp	r1, r31
     e20:	ba 0b       	sbc	r27, r26
     e22:	62 0b       	sbc	r22, r18
     e24:	73 0b       	sbc	r23, r19
     e26:	84 0b       	sbc	r24, r20
     e28:	ba f0       	brmi	.+46     	; 0xe58 <__addsf3x+0x9c>
     e2a:	91 50       	subi	r25, 0x01	; 1
     e2c:	a1 f0       	breq	.+40     	; 0xe56 <__addsf3x+0x9a>
     e2e:	ff 0f       	add	r31, r31
     e30:	bb 1f       	adc	r27, r27
     e32:	66 1f       	adc	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	88 1f       	adc	r24, r24
     e38:	c2 f7       	brpl	.-16     	; 0xe2a <__addsf3x+0x6e>
     e3a:	0e c0       	rjmp	.+28     	; 0xe58 <__addsf3x+0x9c>
     e3c:	ba 0f       	add	r27, r26
     e3e:	62 1f       	adc	r22, r18
     e40:	73 1f       	adc	r23, r19
     e42:	84 1f       	adc	r24, r20
     e44:	48 f4       	brcc	.+18     	; 0xe58 <__addsf3x+0x9c>
     e46:	87 95       	ror	r24
     e48:	77 95       	ror	r23
     e4a:	67 95       	ror	r22
     e4c:	b7 95       	ror	r27
     e4e:	f7 95       	ror	r31
     e50:	9e 3f       	cpi	r25, 0xFE	; 254
     e52:	08 f0       	brcs	.+2      	; 0xe56 <__addsf3x+0x9a>
     e54:	b0 cf       	rjmp	.-160    	; 0xdb6 <__addsf3+0x28>
     e56:	93 95       	inc	r25
     e58:	88 0f       	add	r24, r24
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <__addsf3x+0xa2>
     e5c:	99 27       	eor	r25, r25
     e5e:	ee 0f       	add	r30, r30
     e60:	97 95       	ror	r25
     e62:	87 95       	ror	r24
     e64:	08 95       	ret
     e66:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_pscA>
     e6a:	60 f0       	brcs	.+24     	; 0xe84 <__addsf3x+0xc8>
     e6c:	80 e8       	ldi	r24, 0x80	; 128
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	09 f4       	brne	.+2      	; 0xe74 <__addsf3x+0xb8>
     e72:	9e ef       	ldi	r25, 0xFE	; 254
     e74:	0e 94 8b 08 	call	0x1116	; 0x1116 <__fp_pscB>
     e78:	28 f0       	brcs	.+10     	; 0xe84 <__addsf3x+0xc8>
     e7a:	40 e8       	ldi	r20, 0x80	; 128
     e7c:	51 e0       	ldi	r21, 0x01	; 1
     e7e:	71 f4       	brne	.+28     	; 0xe9c <atan2+0x10>
     e80:	5e ef       	ldi	r21, 0xFE	; 254
     e82:	0c c0       	rjmp	.+24     	; 0xe9c <atan2+0x10>
     e84:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>
     e88:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_zero>

00000e8c <atan2>:
     e8c:	e9 2f       	mov	r30, r25
     e8e:	e0 78       	andi	r30, 0x80	; 128
     e90:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_split3>
     e94:	40 f3       	brcs	.-48     	; 0xe66 <__addsf3x+0xaa>
     e96:	09 2e       	mov	r0, r25
     e98:	05 2a       	or	r0, r21
     e9a:	b1 f3       	breq	.-20     	; 0xe88 <__addsf3x+0xcc>
     e9c:	26 17       	cp	r18, r22
     e9e:	37 07       	cpc	r19, r23
     ea0:	48 07       	cpc	r20, r24
     ea2:	59 07       	cpc	r21, r25
     ea4:	38 f0       	brcs	.+14     	; 0xeb4 <atan2+0x28>
     ea6:	0e 2e       	mov	r0, r30
     ea8:	07 f8       	bld	r0, 7
     eaa:	e0 25       	eor	r30, r0
     eac:	69 f0       	breq	.+26     	; 0xec8 <atan2+0x3c>
     eae:	e0 25       	eor	r30, r0
     eb0:	e0 64       	ori	r30, 0x40	; 64
     eb2:	0a c0       	rjmp	.+20     	; 0xec8 <atan2+0x3c>
     eb4:	ef 63       	ori	r30, 0x3F	; 63
     eb6:	07 f8       	bld	r0, 7
     eb8:	00 94       	com	r0
     eba:	07 fa       	bst	r0, 7
     ebc:	db 01       	movw	r26, r22
     ebe:	b9 01       	movw	r22, r18
     ec0:	9d 01       	movw	r18, r26
     ec2:	dc 01       	movw	r26, r24
     ec4:	ca 01       	movw	r24, r20
     ec6:	ad 01       	movw	r20, r26
     ec8:	ef 93       	push	r30
     eca:	0e 94 bc 07 	call	0xf78	; 0xf78 <__divsf3_pse>
     ece:	0e 94 92 08 	call	0x1124	; 0x1124 <__fp_round>
     ed2:	0e 94 76 07 	call	0xeec	; 0xeec <atan>
     ed6:	5f 91       	pop	r21
     ed8:	55 23       	and	r21, r21
     eda:	39 f0       	breq	.+14     	; 0xeea <atan2+0x5e>
     edc:	2b ed       	ldi	r18, 0xDB	; 219
     ede:	3f e0       	ldi	r19, 0x0F	; 15
     ee0:	49 e4       	ldi	r20, 0x49	; 73
     ee2:	50 fd       	sbrc	r21, 0
     ee4:	49 ec       	ldi	r20, 0xC9	; 201
     ee6:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__addsf3>
     eea:	08 95       	ret

00000eec <atan>:
     eec:	df 93       	push	r29
     eee:	dd 27       	eor	r29, r29
     ef0:	b9 2f       	mov	r27, r25
     ef2:	bf 77       	andi	r27, 0x7F	; 127
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	5f e3       	ldi	r21, 0x3F	; 63
     ef8:	16 16       	cp	r1, r22
     efa:	17 06       	cpc	r1, r23
     efc:	48 07       	cpc	r20, r24
     efe:	5b 07       	cpc	r21, r27
     f00:	18 f4       	brcc	.+6      	; 0xf08 <atan+0x1c>
     f02:	d9 2f       	mov	r29, r25
     f04:	0e 94 cc 08 	call	0x1198	; 0x1198 <inverse>
     f08:	9f 93       	push	r25
     f0a:	8f 93       	push	r24
     f0c:	7f 93       	push	r23
     f0e:	6f 93       	push	r22
     f10:	0e 94 41 09 	call	0x1282	; 0x1282 <square>
     f14:	e4 eb       	ldi	r30, 0xB4	; 180
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__fp_powser>
     f1c:	0e 94 92 08 	call	0x1124	; 0x1124 <__fp_round>
     f20:	2f 91       	pop	r18
     f22:	3f 91       	pop	r19
     f24:	4f 91       	pop	r20
     f26:	5f 91       	pop	r21
     f28:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3x>
     f2c:	dd 23       	and	r29, r29
     f2e:	51 f0       	breq	.+20     	; 0xf44 <atan+0x58>
     f30:	90 58       	subi	r25, 0x80	; 128
     f32:	a2 ea       	ldi	r26, 0xA2	; 162
     f34:	2a ed       	ldi	r18, 0xDA	; 218
     f36:	3f e0       	ldi	r19, 0x0F	; 15
     f38:	49 ec       	ldi	r20, 0xC9	; 201
     f3a:	5f e3       	ldi	r21, 0x3F	; 63
     f3c:	d0 78       	andi	r29, 0x80	; 128
     f3e:	5d 27       	eor	r21, r29
     f40:	0e 94 de 06 	call	0xdbc	; 0xdbc <__addsf3x>
     f44:	df 91       	pop	r29
     f46:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_round>

00000f4a <__divsf3>:
     f4a:	0e 94 b9 07 	call	0xf72	; 0xf72 <__divsf3x>
     f4e:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_round>
     f52:	0e 94 8b 08 	call	0x1116	; 0x1116 <__fp_pscB>
     f56:	58 f0       	brcs	.+22     	; 0xf6e <__divsf3+0x24>
     f58:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_pscA>
     f5c:	40 f0       	brcs	.+16     	; 0xf6e <__divsf3+0x24>
     f5e:	29 f4       	brne	.+10     	; 0xf6a <__divsf3+0x20>
     f60:	5f 3f       	cpi	r21, 0xFF	; 255
     f62:	29 f0       	breq	.+10     	; 0xf6e <__divsf3+0x24>
     f64:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
     f68:	51 11       	cpse	r21, r1
     f6a:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_szero>
     f6e:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>

00000f72 <__divsf3x>:
     f72:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_split3>
     f76:	68 f3       	brcs	.-38     	; 0xf52 <__divsf3+0x8>

00000f78 <__divsf3_pse>:
     f78:	99 23       	and	r25, r25
     f7a:	b1 f3       	breq	.-20     	; 0xf68 <__divsf3+0x1e>
     f7c:	55 23       	and	r21, r21
     f7e:	91 f3       	breq	.-28     	; 0xf64 <__divsf3+0x1a>
     f80:	95 1b       	sub	r25, r21
     f82:	55 0b       	sbc	r21, r21
     f84:	bb 27       	eor	r27, r27
     f86:	aa 27       	eor	r26, r26
     f88:	62 17       	cp	r22, r18
     f8a:	73 07       	cpc	r23, r19
     f8c:	84 07       	cpc	r24, r20
     f8e:	38 f0       	brcs	.+14     	; 0xf9e <__divsf3_pse+0x26>
     f90:	9f 5f       	subi	r25, 0xFF	; 255
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	22 0f       	add	r18, r18
     f96:	33 1f       	adc	r19, r19
     f98:	44 1f       	adc	r20, r20
     f9a:	aa 1f       	adc	r26, r26
     f9c:	a9 f3       	breq	.-22     	; 0xf88 <__divsf3_pse+0x10>
     f9e:	35 d0       	rcall	.+106    	; 0x100a <__divsf3_pse+0x92>
     fa0:	0e 2e       	mov	r0, r30
     fa2:	3a f0       	brmi	.+14     	; 0xfb2 <__divsf3_pse+0x3a>
     fa4:	e0 e8       	ldi	r30, 0x80	; 128
     fa6:	32 d0       	rcall	.+100    	; 0x100c <__divsf3_pse+0x94>
     fa8:	91 50       	subi	r25, 0x01	; 1
     faa:	50 40       	sbci	r21, 0x00	; 0
     fac:	e6 95       	lsr	r30
     fae:	00 1c       	adc	r0, r0
     fb0:	ca f7       	brpl	.-14     	; 0xfa4 <__divsf3_pse+0x2c>
     fb2:	2b d0       	rcall	.+86     	; 0x100a <__divsf3_pse+0x92>
     fb4:	fe 2f       	mov	r31, r30
     fb6:	29 d0       	rcall	.+82     	; 0x100a <__divsf3_pse+0x92>
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	bb 1f       	adc	r27, r27
     fc0:	26 17       	cp	r18, r22
     fc2:	37 07       	cpc	r19, r23
     fc4:	48 07       	cpc	r20, r24
     fc6:	ab 07       	cpc	r26, r27
     fc8:	b0 e8       	ldi	r27, 0x80	; 128
     fca:	09 f0       	breq	.+2      	; 0xfce <__divsf3_pse+0x56>
     fcc:	bb 0b       	sbc	r27, r27
     fce:	80 2d       	mov	r24, r0
     fd0:	bf 01       	movw	r22, r30
     fd2:	ff 27       	eor	r31, r31
     fd4:	93 58       	subi	r25, 0x83	; 131
     fd6:	5f 4f       	sbci	r21, 0xFF	; 255
     fd8:	3a f0       	brmi	.+14     	; 0xfe8 <__divsf3_pse+0x70>
     fda:	9e 3f       	cpi	r25, 0xFE	; 254
     fdc:	51 05       	cpc	r21, r1
     fde:	78 f0       	brcs	.+30     	; 0xffe <__divsf3_pse+0x86>
     fe0:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
     fe4:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_szero>
     fe8:	5f 3f       	cpi	r21, 0xFF	; 255
     fea:	e4 f3       	brlt	.-8      	; 0xfe4 <__divsf3_pse+0x6c>
     fec:	98 3e       	cpi	r25, 0xE8	; 232
     fee:	d4 f3       	brlt	.-12     	; 0xfe4 <__divsf3_pse+0x6c>
     ff0:	86 95       	lsr	r24
     ff2:	77 95       	ror	r23
     ff4:	67 95       	ror	r22
     ff6:	b7 95       	ror	r27
     ff8:	f7 95       	ror	r31
     ffa:	9f 5f       	subi	r25, 0xFF	; 255
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__divsf3_pse+0x78>
     ffe:	88 0f       	add	r24, r24
    1000:	91 1d       	adc	r25, r1
    1002:	96 95       	lsr	r25
    1004:	87 95       	ror	r24
    1006:	97 f9       	bld	r25, 7
    1008:	08 95       	ret
    100a:	e1 e0       	ldi	r30, 0x01	; 1
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	bb 1f       	adc	r27, r27
    1014:	62 17       	cp	r22, r18
    1016:	73 07       	cpc	r23, r19
    1018:	84 07       	cpc	r24, r20
    101a:	ba 07       	cpc	r27, r26
    101c:	20 f0       	brcs	.+8      	; 0x1026 <__divsf3_pse+0xae>
    101e:	62 1b       	sub	r22, r18
    1020:	73 0b       	sbc	r23, r19
    1022:	84 0b       	sbc	r24, r20
    1024:	ba 0b       	sbc	r27, r26
    1026:	ee 1f       	adc	r30, r30
    1028:	88 f7       	brcc	.-30     	; 0x100c <__divsf3_pse+0x94>
    102a:	e0 95       	com	r30
    102c:	08 95       	ret

0000102e <__floatunsisf>:
    102e:	e8 94       	clt
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <__floatsisf+0x12>

00001032 <__floatsisf>:
    1032:	97 fb       	bst	r25, 7
    1034:	3e f4       	brtc	.+14     	; 0x1044 <__floatsisf+0x12>
    1036:	90 95       	com	r25
    1038:	80 95       	com	r24
    103a:	70 95       	com	r23
    103c:	61 95       	neg	r22
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	8f 4f       	sbci	r24, 0xFF	; 255
    1042:	9f 4f       	sbci	r25, 0xFF	; 255
    1044:	99 23       	and	r25, r25
    1046:	a9 f0       	breq	.+42     	; 0x1072 <__floatsisf+0x40>
    1048:	f9 2f       	mov	r31, r25
    104a:	96 e9       	ldi	r25, 0x96	; 150
    104c:	bb 27       	eor	r27, r27
    104e:	93 95       	inc	r25
    1050:	f6 95       	lsr	r31
    1052:	87 95       	ror	r24
    1054:	77 95       	ror	r23
    1056:	67 95       	ror	r22
    1058:	b7 95       	ror	r27
    105a:	f1 11       	cpse	r31, r1
    105c:	f8 cf       	rjmp	.-16     	; 0x104e <__floatsisf+0x1c>
    105e:	fa f4       	brpl	.+62     	; 0x109e <__floatsisf+0x6c>
    1060:	bb 0f       	add	r27, r27
    1062:	11 f4       	brne	.+4      	; 0x1068 <__floatsisf+0x36>
    1064:	60 ff       	sbrs	r22, 0
    1066:	1b c0       	rjmp	.+54     	; 0x109e <__floatsisf+0x6c>
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	8f 4f       	sbci	r24, 0xFF	; 255
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	16 c0       	rjmp	.+44     	; 0x109e <__floatsisf+0x6c>
    1072:	88 23       	and	r24, r24
    1074:	11 f0       	breq	.+4      	; 0x107a <__floatsisf+0x48>
    1076:	96 e9       	ldi	r25, 0x96	; 150
    1078:	11 c0       	rjmp	.+34     	; 0x109c <__floatsisf+0x6a>
    107a:	77 23       	and	r23, r23
    107c:	21 f0       	breq	.+8      	; 0x1086 <__floatsisf+0x54>
    107e:	9e e8       	ldi	r25, 0x8E	; 142
    1080:	87 2f       	mov	r24, r23
    1082:	76 2f       	mov	r23, r22
    1084:	05 c0       	rjmp	.+10     	; 0x1090 <__floatsisf+0x5e>
    1086:	66 23       	and	r22, r22
    1088:	71 f0       	breq	.+28     	; 0x10a6 <__floatsisf+0x74>
    108a:	96 e8       	ldi	r25, 0x86	; 134
    108c:	86 2f       	mov	r24, r22
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	2a f0       	brmi	.+10     	; 0x109e <__floatsisf+0x6c>
    1094:	9a 95       	dec	r25
    1096:	66 0f       	add	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	da f7       	brpl	.-10     	; 0x1094 <__floatsisf+0x62>
    109e:	88 0f       	add	r24, r24
    10a0:	96 95       	lsr	r25
    10a2:	87 95       	ror	r24
    10a4:	97 f9       	bld	r25, 7
    10a6:	08 95       	ret

000010a8 <__fp_inf>:
    10a8:	97 f9       	bld	r25, 7
    10aa:	9f 67       	ori	r25, 0x7F	; 127
    10ac:	80 e8       	ldi	r24, 0x80	; 128
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	08 95       	ret

000010b4 <__fp_nan>:
    10b4:	9f ef       	ldi	r25, 0xFF	; 255
    10b6:	80 ec       	ldi	r24, 0xC0	; 192
    10b8:	08 95       	ret

000010ba <__fp_powser>:
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	1f 93       	push	r17
    10c0:	0f 93       	push	r16
    10c2:	ff 92       	push	r15
    10c4:	ef 92       	push	r14
    10c6:	df 92       	push	r13
    10c8:	7b 01       	movw	r14, r22
    10ca:	8c 01       	movw	r16, r24
    10cc:	68 94       	set
    10ce:	06 c0       	rjmp	.+12     	; 0x10dc <__fp_powser+0x22>
    10d0:	da 2e       	mov	r13, r26
    10d2:	ef 01       	movw	r28, r30
    10d4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3x>
    10d8:	fe 01       	movw	r30, r28
    10da:	e8 94       	clt
    10dc:	a5 91       	lpm	r26, Z+
    10de:	25 91       	lpm	r18, Z+
    10e0:	35 91       	lpm	r19, Z+
    10e2:	45 91       	lpm	r20, Z+
    10e4:	55 91       	lpm	r21, Z+
    10e6:	a6 f3       	brts	.-24     	; 0x10d0 <__fp_powser+0x16>
    10e8:	ef 01       	movw	r28, r30
    10ea:	0e 94 de 06 	call	0xdbc	; 0xdbc <__addsf3x>
    10ee:	fe 01       	movw	r30, r28
    10f0:	97 01       	movw	r18, r14
    10f2:	a8 01       	movw	r20, r16
    10f4:	da 94       	dec	r13
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <__fp_powser+0x18>
    10f8:	df 90       	pop	r13
    10fa:	ef 90       	pop	r14
    10fc:	ff 90       	pop	r15
    10fe:	0f 91       	pop	r16
    1100:	1f 91       	pop	r17
    1102:	cf 91       	pop	r28
    1104:	df 91       	pop	r29
    1106:	08 95       	ret

00001108 <__fp_pscA>:
    1108:	00 24       	eor	r0, r0
    110a:	0a 94       	dec	r0
    110c:	16 16       	cp	r1, r22
    110e:	17 06       	cpc	r1, r23
    1110:	18 06       	cpc	r1, r24
    1112:	09 06       	cpc	r0, r25
    1114:	08 95       	ret

00001116 <__fp_pscB>:
    1116:	00 24       	eor	r0, r0
    1118:	0a 94       	dec	r0
    111a:	12 16       	cp	r1, r18
    111c:	13 06       	cpc	r1, r19
    111e:	14 06       	cpc	r1, r20
    1120:	05 06       	cpc	r0, r21
    1122:	08 95       	ret

00001124 <__fp_round>:
    1124:	09 2e       	mov	r0, r25
    1126:	03 94       	inc	r0
    1128:	00 0c       	add	r0, r0
    112a:	11 f4       	brne	.+4      	; 0x1130 <__fp_round+0xc>
    112c:	88 23       	and	r24, r24
    112e:	52 f0       	brmi	.+20     	; 0x1144 <__fp_round+0x20>
    1130:	bb 0f       	add	r27, r27
    1132:	40 f4       	brcc	.+16     	; 0x1144 <__fp_round+0x20>
    1134:	bf 2b       	or	r27, r31
    1136:	11 f4       	brne	.+4      	; 0x113c <__fp_round+0x18>
    1138:	60 ff       	sbrs	r22, 0
    113a:	04 c0       	rjmp	.+8      	; 0x1144 <__fp_round+0x20>
    113c:	6f 5f       	subi	r22, 0xFF	; 255
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	8f 4f       	sbci	r24, 0xFF	; 255
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	08 95       	ret

00001146 <__fp_split3>:
    1146:	57 fd       	sbrc	r21, 7
    1148:	90 58       	subi	r25, 0x80	; 128
    114a:	44 0f       	add	r20, r20
    114c:	55 1f       	adc	r21, r21
    114e:	59 f0       	breq	.+22     	; 0x1166 <__fp_splitA+0x10>
    1150:	5f 3f       	cpi	r21, 0xFF	; 255
    1152:	71 f0       	breq	.+28     	; 0x1170 <__fp_splitA+0x1a>
    1154:	47 95       	ror	r20

00001156 <__fp_splitA>:
    1156:	88 0f       	add	r24, r24
    1158:	97 fb       	bst	r25, 7
    115a:	99 1f       	adc	r25, r25
    115c:	61 f0       	breq	.+24     	; 0x1176 <__fp_splitA+0x20>
    115e:	9f 3f       	cpi	r25, 0xFF	; 255
    1160:	79 f0       	breq	.+30     	; 0x1180 <__fp_splitA+0x2a>
    1162:	87 95       	ror	r24
    1164:	08 95       	ret
    1166:	12 16       	cp	r1, r18
    1168:	13 06       	cpc	r1, r19
    116a:	14 06       	cpc	r1, r20
    116c:	55 1f       	adc	r21, r21
    116e:	f2 cf       	rjmp	.-28     	; 0x1154 <__fp_split3+0xe>
    1170:	46 95       	lsr	r20
    1172:	f1 df       	rcall	.-30     	; 0x1156 <__fp_splitA>
    1174:	08 c0       	rjmp	.+16     	; 0x1186 <__fp_splitA+0x30>
    1176:	16 16       	cp	r1, r22
    1178:	17 06       	cpc	r1, r23
    117a:	18 06       	cpc	r1, r24
    117c:	99 1f       	adc	r25, r25
    117e:	f1 cf       	rjmp	.-30     	; 0x1162 <__fp_splitA+0xc>
    1180:	86 95       	lsr	r24
    1182:	71 05       	cpc	r23, r1
    1184:	61 05       	cpc	r22, r1
    1186:	08 94       	sec
    1188:	08 95       	ret

0000118a <__fp_zero>:
    118a:	e8 94       	clt

0000118c <__fp_szero>:
    118c:	bb 27       	eor	r27, r27
    118e:	66 27       	eor	r22, r22
    1190:	77 27       	eor	r23, r23
    1192:	cb 01       	movw	r24, r22
    1194:	97 f9       	bld	r25, 7
    1196:	08 95       	ret

00001198 <inverse>:
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e8       	ldi	r24, 0x80	; 128
    11a2:	9f e3       	ldi	r25, 0x3F	; 63
    11a4:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__divsf3>

000011a8 <__mulsf3>:
    11a8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3x>
    11ac:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__fp_round>
    11b0:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_pscA>
    11b4:	38 f0       	brcs	.+14     	; 0x11c4 <__mulsf3+0x1c>
    11b6:	0e 94 8b 08 	call	0x1116	; 0x1116 <__fp_pscB>
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__mulsf3+0x1c>
    11bc:	95 23       	and	r25, r21
    11be:	11 f0       	breq	.+4      	; 0x11c4 <__mulsf3+0x1c>
    11c0:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
    11c4:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_nan>
    11c8:	11 24       	eor	r1, r1
    11ca:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_szero>

000011ce <__mulsf3x>:
    11ce:	0e 94 a3 08 	call	0x1146	; 0x1146 <__fp_split3>
    11d2:	70 f3       	brcs	.-36     	; 0x11b0 <__mulsf3+0x8>

000011d4 <__mulsf3_pse>:
    11d4:	95 9f       	mul	r25, r21
    11d6:	c1 f3       	breq	.-16     	; 0x11c8 <__mulsf3+0x20>
    11d8:	95 0f       	add	r25, r21
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	55 1f       	adc	r21, r21
    11de:	62 9f       	mul	r22, r18
    11e0:	f0 01       	movw	r30, r0
    11e2:	72 9f       	mul	r23, r18
    11e4:	bb 27       	eor	r27, r27
    11e6:	f0 0d       	add	r31, r0
    11e8:	b1 1d       	adc	r27, r1
    11ea:	63 9f       	mul	r22, r19
    11ec:	aa 27       	eor	r26, r26
    11ee:	f0 0d       	add	r31, r0
    11f0:	b1 1d       	adc	r27, r1
    11f2:	aa 1f       	adc	r26, r26
    11f4:	64 9f       	mul	r22, r20
    11f6:	66 27       	eor	r22, r22
    11f8:	b0 0d       	add	r27, r0
    11fa:	a1 1d       	adc	r26, r1
    11fc:	66 1f       	adc	r22, r22
    11fe:	82 9f       	mul	r24, r18
    1200:	22 27       	eor	r18, r18
    1202:	b0 0d       	add	r27, r0
    1204:	a1 1d       	adc	r26, r1
    1206:	62 1f       	adc	r22, r18
    1208:	73 9f       	mul	r23, r19
    120a:	b0 0d       	add	r27, r0
    120c:	a1 1d       	adc	r26, r1
    120e:	62 1f       	adc	r22, r18
    1210:	83 9f       	mul	r24, r19
    1212:	a0 0d       	add	r26, r0
    1214:	61 1d       	adc	r22, r1
    1216:	22 1f       	adc	r18, r18
    1218:	74 9f       	mul	r23, r20
    121a:	33 27       	eor	r19, r19
    121c:	a0 0d       	add	r26, r0
    121e:	61 1d       	adc	r22, r1
    1220:	23 1f       	adc	r18, r19
    1222:	84 9f       	mul	r24, r20
    1224:	60 0d       	add	r22, r0
    1226:	21 1d       	adc	r18, r1
    1228:	82 2f       	mov	r24, r18
    122a:	76 2f       	mov	r23, r22
    122c:	6a 2f       	mov	r22, r26
    122e:	11 24       	eor	r1, r1
    1230:	9f 57       	subi	r25, 0x7F	; 127
    1232:	50 40       	sbci	r21, 0x00	; 0
    1234:	9a f0       	brmi	.+38     	; 0x125c <__mulsf3_pse+0x88>
    1236:	f1 f0       	breq	.+60     	; 0x1274 <__mulsf3_pse+0xa0>
    1238:	88 23       	and	r24, r24
    123a:	4a f0       	brmi	.+18     	; 0x124e <__mulsf3_pse+0x7a>
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	bb 1f       	adc	r27, r27
    1242:	66 1f       	adc	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	91 50       	subi	r25, 0x01	; 1
    124a:	50 40       	sbci	r21, 0x00	; 0
    124c:	a9 f7       	brne	.-22     	; 0x1238 <__mulsf3_pse+0x64>
    124e:	9e 3f       	cpi	r25, 0xFE	; 254
    1250:	51 05       	cpc	r21, r1
    1252:	80 f0       	brcs	.+32     	; 0x1274 <__mulsf3_pse+0xa0>
    1254:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_inf>
    1258:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_szero>
    125c:	5f 3f       	cpi	r21, 0xFF	; 255
    125e:	e4 f3       	brlt	.-8      	; 0x1258 <__mulsf3_pse+0x84>
    1260:	98 3e       	cpi	r25, 0xE8	; 232
    1262:	d4 f3       	brlt	.-12     	; 0x1258 <__mulsf3_pse+0x84>
    1264:	86 95       	lsr	r24
    1266:	77 95       	ror	r23
    1268:	67 95       	ror	r22
    126a:	b7 95       	ror	r27
    126c:	f7 95       	ror	r31
    126e:	e7 95       	ror	r30
    1270:	9f 5f       	subi	r25, 0xFF	; 255
    1272:	c1 f7       	brne	.-16     	; 0x1264 <__mulsf3_pse+0x90>
    1274:	fe 2b       	or	r31, r30
    1276:	88 0f       	add	r24, r24
    1278:	91 1d       	adc	r25, r1
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	97 f9       	bld	r25, 7
    1280:	08 95       	ret

00001282 <square>:
    1282:	9b 01       	movw	r18, r22
    1284:	ac 01       	movw	r20, r24
    1286:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__mulsf3>

0000128a <__udivmodsi4>:
    128a:	a1 e2       	ldi	r26, 0x21	; 33
    128c:	1a 2e       	mov	r1, r26
    128e:	aa 1b       	sub	r26, r26
    1290:	bb 1b       	sub	r27, r27
    1292:	fd 01       	movw	r30, r26
    1294:	0d c0       	rjmp	.+26     	; 0x12b0 <__udivmodsi4_ep>

00001296 <__udivmodsi4_loop>:
    1296:	aa 1f       	adc	r26, r26
    1298:	bb 1f       	adc	r27, r27
    129a:	ee 1f       	adc	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	a2 17       	cp	r26, r18
    12a0:	b3 07       	cpc	r27, r19
    12a2:	e4 07       	cpc	r30, r20
    12a4:	f5 07       	cpc	r31, r21
    12a6:	20 f0       	brcs	.+8      	; 0x12b0 <__udivmodsi4_ep>
    12a8:	a2 1b       	sub	r26, r18
    12aa:	b3 0b       	sbc	r27, r19
    12ac:	e4 0b       	sbc	r30, r20
    12ae:	f5 0b       	sbc	r31, r21

000012b0 <__udivmodsi4_ep>:
    12b0:	66 1f       	adc	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	88 1f       	adc	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	1a 94       	dec	r1
    12ba:	69 f7       	brne	.-38     	; 0x1296 <__udivmodsi4_loop>
    12bc:	60 95       	com	r22
    12be:	70 95       	com	r23
    12c0:	80 95       	com	r24
    12c2:	90 95       	com	r25
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	bd 01       	movw	r22, r26
    12ca:	cf 01       	movw	r24, r30
    12cc:	08 95       	ret

000012ce <dtostrf>:
    12ce:	ef 92       	push	r14
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	e8 01       	movw	r28, r16
    12da:	47 fd       	sbrc	r20, 7
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <dtostrf+0x14>
    12de:	34 e0       	ldi	r19, 0x04	; 4
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <dtostrf+0x16>
    12e2:	34 e1       	ldi	r19, 0x14	; 20
    12e4:	04 2e       	mov	r0, r20
    12e6:	00 0c       	add	r0, r0
    12e8:	55 0b       	sbc	r21, r21
    12ea:	57 ff       	sbrs	r21, 7
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <dtostrf+0x26>
    12ee:	51 95       	neg	r21
    12f0:	41 95       	neg	r20
    12f2:	51 09       	sbc	r21, r1
    12f4:	e3 2e       	mov	r14, r19
    12f6:	02 2f       	mov	r16, r18
    12f8:	24 2f       	mov	r18, r20
    12fa:	ae 01       	movw	r20, r28
    12fc:	0e 94 87 09 	call	0x130e	; 0x130e <dtoa_prf>
    1300:	ce 01       	movw	r24, r28
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ef 90       	pop	r14
    130c:	08 95       	ret

0000130e <dtoa_prf>:
    130e:	a9 e0       	ldi	r26, 0x09	; 9
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ed e8       	ldi	r30, 0x8D	; 141
    1314:	f9 e0       	ldi	r31, 0x09	; 9
    1316:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__prologue_saves__+0xc>
    131a:	6a 01       	movw	r12, r20
    131c:	12 2f       	mov	r17, r18
    131e:	b0 2e       	mov	r11, r16
    1320:	2b e3       	ldi	r18, 0x3B	; 59
    1322:	20 17       	cp	r18, r16
    1324:	20 f0       	brcs	.+8      	; 0x132e <dtoa_prf+0x20>
    1326:	ff 24       	eor	r15, r15
    1328:	f3 94       	inc	r15
    132a:	f0 0e       	add	r15, r16
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <dtoa_prf+0x24>
    132e:	2c e3       	ldi	r18, 0x3C	; 60
    1330:	f2 2e       	mov	r15, r18
    1332:	0f 2d       	mov	r16, r15
    1334:	27 e0       	ldi	r18, 0x07	; 7
    1336:	ae 01       	movw	r20, r28
    1338:	4f 5f       	subi	r20, 0xFF	; 255
    133a:	5f 4f       	sbci	r21, 0xFF	; 255
    133c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__ftoa_engine>
    1340:	bc 01       	movw	r22, r24
    1342:	49 81       	ldd	r20, Y+1	; 0x01
    1344:	84 2f       	mov	r24, r20
    1346:	89 70       	andi	r24, 0x09	; 9
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	31 f0       	breq	.+12     	; 0x1358 <dtoa_prf+0x4a>
    134c:	e1 fc       	sbrc	r14, 1
    134e:	06 c0       	rjmp	.+12     	; 0x135c <dtoa_prf+0x4e>
    1350:	e0 fe       	sbrs	r14, 0
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <dtoa_prf+0x52>
    1354:	90 e2       	ldi	r25, 0x20	; 32
    1356:	05 c0       	rjmp	.+10     	; 0x1362 <dtoa_prf+0x54>
    1358:	9d e2       	ldi	r25, 0x2D	; 45
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <dtoa_prf+0x54>
    135c:	9b e2       	ldi	r25, 0x2B	; 43
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <dtoa_prf+0x54>
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	5e 2d       	mov	r21, r14
    1364:	50 71       	andi	r21, 0x10	; 16
    1366:	43 ff       	sbrs	r20, 3
    1368:	3c c0       	rjmp	.+120    	; 0x13e2 <dtoa_prf+0xd4>
    136a:	91 11       	cpse	r25, r1
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <dtoa_prf+0x64>
    136e:	83 e0       	ldi	r24, 0x03	; 3
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <dtoa_prf+0x66>
    1372:	84 e0       	ldi	r24, 0x04	; 4
    1374:	81 17       	cp	r24, r17
    1376:	18 f4       	brcc	.+6      	; 0x137e <dtoa_prf+0x70>
    1378:	21 2f       	mov	r18, r17
    137a:	28 1b       	sub	r18, r24
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <dtoa_prf+0x72>
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	51 11       	cpse	r21, r1
    1382:	0b c0       	rjmp	.+22     	; 0x139a <dtoa_prf+0x8c>
    1384:	f6 01       	movw	r30, r12
    1386:	82 2f       	mov	r24, r18
    1388:	30 e2       	ldi	r19, 0x20	; 32
    138a:	88 23       	and	r24, r24
    138c:	19 f0       	breq	.+6      	; 0x1394 <dtoa_prf+0x86>
    138e:	31 93       	st	Z+, r19
    1390:	81 50       	subi	r24, 0x01	; 1
    1392:	fb cf       	rjmp	.-10     	; 0x138a <dtoa_prf+0x7c>
    1394:	c2 0e       	add	r12, r18
    1396:	d1 1c       	adc	r13, r1
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	99 23       	and	r25, r25
    139c:	29 f0       	breq	.+10     	; 0x13a8 <dtoa_prf+0x9a>
    139e:	d6 01       	movw	r26, r12
    13a0:	9c 93       	st	X, r25
    13a2:	f6 01       	movw	r30, r12
    13a4:	31 96       	adiw	r30, 0x01	; 1
    13a6:	6f 01       	movw	r12, r30
    13a8:	c6 01       	movw	r24, r12
    13aa:	03 96       	adiw	r24, 0x03	; 3
    13ac:	e2 fe       	sbrs	r14, 2
    13ae:	0a c0       	rjmp	.+20     	; 0x13c4 <dtoa_prf+0xb6>
    13b0:	3e e4       	ldi	r19, 0x4E	; 78
    13b2:	d6 01       	movw	r26, r12
    13b4:	3c 93       	st	X, r19
    13b6:	41 e4       	ldi	r20, 0x41	; 65
    13b8:	11 96       	adiw	r26, 0x01	; 1
    13ba:	4c 93       	st	X, r20
    13bc:	11 97       	sbiw	r26, 0x01	; 1
    13be:	12 96       	adiw	r26, 0x02	; 2
    13c0:	3c 93       	st	X, r19
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <dtoa_prf+0xc2>
    13c4:	3e e6       	ldi	r19, 0x6E	; 110
    13c6:	f6 01       	movw	r30, r12
    13c8:	30 83       	st	Z, r19
    13ca:	41 e6       	ldi	r20, 0x61	; 97
    13cc:	41 83       	std	Z+1, r20	; 0x01
    13ce:	32 83       	std	Z+2, r19	; 0x02
    13d0:	fc 01       	movw	r30, r24
    13d2:	32 2f       	mov	r19, r18
    13d4:	40 e2       	ldi	r20, 0x20	; 32
    13d6:	33 23       	and	r19, r19
    13d8:	09 f4       	brne	.+2      	; 0x13dc <dtoa_prf+0xce>
    13da:	42 c0       	rjmp	.+132    	; 0x1460 <dtoa_prf+0x152>
    13dc:	41 93       	st	Z+, r20
    13de:	31 50       	subi	r19, 0x01	; 1
    13e0:	fa cf       	rjmp	.-12     	; 0x13d6 <dtoa_prf+0xc8>
    13e2:	42 ff       	sbrs	r20, 2
    13e4:	44 c0       	rjmp	.+136    	; 0x146e <dtoa_prf+0x160>
    13e6:	91 11       	cpse	r25, r1
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <dtoa_prf+0xe0>
    13ea:	83 e0       	ldi	r24, 0x03	; 3
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <dtoa_prf+0xe2>
    13ee:	84 e0       	ldi	r24, 0x04	; 4
    13f0:	81 17       	cp	r24, r17
    13f2:	18 f4       	brcc	.+6      	; 0x13fa <dtoa_prf+0xec>
    13f4:	21 2f       	mov	r18, r17
    13f6:	28 1b       	sub	r18, r24
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <dtoa_prf+0xee>
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	51 11       	cpse	r21, r1
    13fe:	0b c0       	rjmp	.+22     	; 0x1416 <dtoa_prf+0x108>
    1400:	f6 01       	movw	r30, r12
    1402:	82 2f       	mov	r24, r18
    1404:	30 e2       	ldi	r19, 0x20	; 32
    1406:	88 23       	and	r24, r24
    1408:	19 f0       	breq	.+6      	; 0x1410 <dtoa_prf+0x102>
    140a:	31 93       	st	Z+, r19
    140c:	81 50       	subi	r24, 0x01	; 1
    140e:	fb cf       	rjmp	.-10     	; 0x1406 <dtoa_prf+0xf8>
    1410:	c2 0e       	add	r12, r18
    1412:	d1 1c       	adc	r13, r1
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	99 23       	and	r25, r25
    1418:	29 f0       	breq	.+10     	; 0x1424 <dtoa_prf+0x116>
    141a:	d6 01       	movw	r26, r12
    141c:	9c 93       	st	X, r25
    141e:	f6 01       	movw	r30, r12
    1420:	31 96       	adiw	r30, 0x01	; 1
    1422:	6f 01       	movw	r12, r30
    1424:	c6 01       	movw	r24, r12
    1426:	03 96       	adiw	r24, 0x03	; 3
    1428:	e2 fe       	sbrs	r14, 2
    142a:	0b c0       	rjmp	.+22     	; 0x1442 <dtoa_prf+0x134>
    142c:	39 e4       	ldi	r19, 0x49	; 73
    142e:	d6 01       	movw	r26, r12
    1430:	3c 93       	st	X, r19
    1432:	3e e4       	ldi	r19, 0x4E	; 78
    1434:	11 96       	adiw	r26, 0x01	; 1
    1436:	3c 93       	st	X, r19
    1438:	11 97       	sbiw	r26, 0x01	; 1
    143a:	36 e4       	ldi	r19, 0x46	; 70
    143c:	12 96       	adiw	r26, 0x02	; 2
    143e:	3c 93       	st	X, r19
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <dtoa_prf+0x142>
    1442:	39 e6       	ldi	r19, 0x69	; 105
    1444:	f6 01       	movw	r30, r12
    1446:	30 83       	st	Z, r19
    1448:	3e e6       	ldi	r19, 0x6E	; 110
    144a:	31 83       	std	Z+1, r19	; 0x01
    144c:	36 e6       	ldi	r19, 0x66	; 102
    144e:	32 83       	std	Z+2, r19	; 0x02
    1450:	fc 01       	movw	r30, r24
    1452:	32 2f       	mov	r19, r18
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	33 23       	and	r19, r19
    1458:	19 f0       	breq	.+6      	; 0x1460 <dtoa_prf+0x152>
    145a:	41 93       	st	Z+, r20
    145c:	31 50       	subi	r19, 0x01	; 1
    145e:	fb cf       	rjmp	.-10     	; 0x1456 <dtoa_prf+0x148>
    1460:	fc 01       	movw	r30, r24
    1462:	e2 0f       	add	r30, r18
    1464:	f1 1d       	adc	r31, r1
    1466:	10 82       	st	Z, r1
    1468:	8e ef       	ldi	r24, 0xFE	; 254
    146a:	9f ef       	ldi	r25, 0xFF	; 255
    146c:	a6 c0       	rjmp	.+332    	; 0x15ba <dtoa_prf+0x2ac>
    146e:	21 e0       	ldi	r18, 0x01	; 1
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	91 11       	cpse	r25, r1
    1474:	02 c0       	rjmp	.+4      	; 0x147a <dtoa_prf+0x16c>
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	16 16       	cp	r1, r22
    147c:	17 06       	cpc	r1, r23
    147e:	1c f4       	brge	.+6      	; 0x1486 <dtoa_prf+0x178>
    1480:	fb 01       	movw	r30, r22
    1482:	31 96       	adiw	r30, 0x01	; 1
    1484:	02 c0       	rjmp	.+4      	; 0x148a <dtoa_prf+0x17c>
    1486:	e1 e0       	ldi	r30, 0x01	; 1
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	2e 0f       	add	r18, r30
    148c:	3f 1f       	adc	r19, r31
    148e:	bb 20       	and	r11, r11
    1490:	21 f0       	breq	.+8      	; 0x149a <dtoa_prf+0x18c>
    1492:	eb 2d       	mov	r30, r11
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	31 96       	adiw	r30, 0x01	; 1
    1498:	02 c0       	rjmp	.+4      	; 0x149e <dtoa_prf+0x190>
    149a:	e0 e0       	ldi	r30, 0x00	; 0
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	2e 0f       	add	r18, r30
    14a0:	3f 1f       	adc	r19, r31
    14a2:	e1 2f       	mov	r30, r17
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	2e 17       	cp	r18, r30
    14a8:	3f 07       	cpc	r19, r31
    14aa:	1c f4       	brge	.+6      	; 0x14b2 <dtoa_prf+0x1a4>
    14ac:	12 1b       	sub	r17, r18
    14ae:	21 2f       	mov	r18, r17
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <dtoa_prf+0x1a6>
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	8e 2d       	mov	r24, r14
    14b6:	88 71       	andi	r24, 0x18	; 24
    14b8:	59 f4       	brne	.+22     	; 0x14d0 <dtoa_prf+0x1c2>
    14ba:	f6 01       	movw	r30, r12
    14bc:	82 2f       	mov	r24, r18
    14be:	30 e2       	ldi	r19, 0x20	; 32
    14c0:	88 23       	and	r24, r24
    14c2:	19 f0       	breq	.+6      	; 0x14ca <dtoa_prf+0x1bc>
    14c4:	31 93       	st	Z+, r19
    14c6:	81 50       	subi	r24, 0x01	; 1
    14c8:	fb cf       	rjmp	.-10     	; 0x14c0 <dtoa_prf+0x1b2>
    14ca:	c2 0e       	add	r12, r18
    14cc:	d1 1c       	adc	r13, r1
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	99 23       	and	r25, r25
    14d2:	29 f0       	breq	.+10     	; 0x14de <dtoa_prf+0x1d0>
    14d4:	d6 01       	movw	r26, r12
    14d6:	9c 93       	st	X, r25
    14d8:	f6 01       	movw	r30, r12
    14da:	31 96       	adiw	r30, 0x01	; 1
    14dc:	6f 01       	movw	r12, r30
    14de:	51 11       	cpse	r21, r1
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <dtoa_prf+0x1ea>
    14e2:	f6 01       	movw	r30, r12
    14e4:	82 2f       	mov	r24, r18
    14e6:	90 e3       	ldi	r25, 0x30	; 48
    14e8:	88 23       	and	r24, r24
    14ea:	19 f0       	breq	.+6      	; 0x14f2 <dtoa_prf+0x1e4>
    14ec:	91 93       	st	Z+, r25
    14ee:	81 50       	subi	r24, 0x01	; 1
    14f0:	fb cf       	rjmp	.-10     	; 0x14e8 <dtoa_prf+0x1da>
    14f2:	c2 0e       	add	r12, r18
    14f4:	d1 1c       	adc	r13, r1
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	0f 2d       	mov	r16, r15
    14fa:	06 0f       	add	r16, r22
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	34 2f       	mov	r19, r20
    1500:	30 71       	andi	r19, 0x10	; 16
    1502:	44 ff       	sbrs	r20, 4
    1504:	03 c0       	rjmp	.+6      	; 0x150c <dtoa_prf+0x1fe>
    1506:	91 33       	cpi	r25, 0x31	; 49
    1508:	09 f4       	brne	.+2      	; 0x150c <dtoa_prf+0x1fe>
    150a:	01 50       	subi	r16, 0x01	; 1
    150c:	10 16       	cp	r1, r16
    150e:	24 f4       	brge	.+8      	; 0x1518 <dtoa_prf+0x20a>
    1510:	09 30       	cpi	r16, 0x09	; 9
    1512:	18 f0       	brcs	.+6      	; 0x151a <dtoa_prf+0x20c>
    1514:	08 e0       	ldi	r16, 0x08	; 8
    1516:	01 c0       	rjmp	.+2      	; 0x151a <dtoa_prf+0x20c>
    1518:	01 e0       	ldi	r16, 0x01	; 1
    151a:	ab 01       	movw	r20, r22
    151c:	77 ff       	sbrs	r23, 7
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <dtoa_prf+0x216>
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e0       	ldi	r21, 0x00	; 0
    1524:	fb 01       	movw	r30, r22
    1526:	e4 1b       	sub	r30, r20
    1528:	f5 0b       	sbc	r31, r21
    152a:	a1 e0       	ldi	r26, 0x01	; 1
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ac 0f       	add	r26, r28
    1530:	bd 1f       	adc	r27, r29
    1532:	ea 0f       	add	r30, r26
    1534:	fb 1f       	adc	r31, r27
    1536:	8e e2       	ldi	r24, 0x2E	; 46
    1538:	a8 2e       	mov	r10, r24
    153a:	4b 01       	movw	r8, r22
    153c:	80 1a       	sub	r8, r16
    153e:	91 08       	sbc	r9, r1
    1540:	0b 2d       	mov	r16, r11
    1542:	10 e0       	ldi	r17, 0x00	; 0
    1544:	11 95       	neg	r17
    1546:	01 95       	neg	r16
    1548:	11 09       	sbc	r17, r1
    154a:	4f 3f       	cpi	r20, 0xFF	; 255
    154c:	bf ef       	ldi	r27, 0xFF	; 255
    154e:	5b 07       	cpc	r21, r27
    1550:	21 f4       	brne	.+8      	; 0x155a <dtoa_prf+0x24c>
    1552:	d6 01       	movw	r26, r12
    1554:	ac 92       	st	X, r10
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	6d 01       	movw	r12, r26
    155a:	64 17       	cp	r22, r20
    155c:	75 07       	cpc	r23, r21
    155e:	2c f0       	brlt	.+10     	; 0x156a <dtoa_prf+0x25c>
    1560:	84 16       	cp	r8, r20
    1562:	95 06       	cpc	r9, r21
    1564:	14 f4       	brge	.+4      	; 0x156a <dtoa_prf+0x25c>
    1566:	81 81       	ldd	r24, Z+1	; 0x01
    1568:	01 c0       	rjmp	.+2      	; 0x156c <dtoa_prf+0x25e>
    156a:	80 e3       	ldi	r24, 0x30	; 48
    156c:	41 50       	subi	r20, 0x01	; 1
    156e:	51 09       	sbc	r21, r1
    1570:	31 96       	adiw	r30, 0x01	; 1
    1572:	d6 01       	movw	r26, r12
    1574:	11 96       	adiw	r26, 0x01	; 1
    1576:	7d 01       	movw	r14, r26
    1578:	40 17       	cp	r20, r16
    157a:	51 07       	cpc	r21, r17
    157c:	24 f0       	brlt	.+8      	; 0x1586 <dtoa_prf+0x278>
    157e:	d6 01       	movw	r26, r12
    1580:	8c 93       	st	X, r24
    1582:	67 01       	movw	r12, r14
    1584:	e2 cf       	rjmp	.-60     	; 0x154a <dtoa_prf+0x23c>
    1586:	64 17       	cp	r22, r20
    1588:	75 07       	cpc	r23, r21
    158a:	39 f4       	brne	.+14     	; 0x159a <dtoa_prf+0x28c>
    158c:	96 33       	cpi	r25, 0x36	; 54
    158e:	20 f4       	brcc	.+8      	; 0x1598 <dtoa_prf+0x28a>
    1590:	95 33       	cpi	r25, 0x35	; 53
    1592:	19 f4       	brne	.+6      	; 0x159a <dtoa_prf+0x28c>
    1594:	31 11       	cpse	r19, r1
    1596:	01 c0       	rjmp	.+2      	; 0x159a <dtoa_prf+0x28c>
    1598:	81 e3       	ldi	r24, 0x31	; 49
    159a:	f6 01       	movw	r30, r12
    159c:	80 83       	st	Z, r24
    159e:	f7 01       	movw	r30, r14
    15a0:	82 2f       	mov	r24, r18
    15a2:	90 e2       	ldi	r25, 0x20	; 32
    15a4:	88 23       	and	r24, r24
    15a6:	19 f0       	breq	.+6      	; 0x15ae <dtoa_prf+0x2a0>
    15a8:	91 93       	st	Z+, r25
    15aa:	81 50       	subi	r24, 0x01	; 1
    15ac:	fb cf       	rjmp	.-10     	; 0x15a4 <dtoa_prf+0x296>
    15ae:	f7 01       	movw	r30, r14
    15b0:	e2 0f       	add	r30, r18
    15b2:	f1 1d       	adc	r31, r1
    15b4:	10 82       	st	Z, r1
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	29 96       	adiw	r28, 0x09	; 9
    15bc:	ec e0       	ldi	r30, 0x0C	; 12
    15be:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__epilogue_restores__+0xc>

000015c2 <__ftoa_engine>:
    15c2:	28 30       	cpi	r18, 0x08	; 8
    15c4:	08 f0       	brcs	.+2      	; 0x15c8 <__ftoa_engine+0x6>
    15c6:	27 e0       	ldi	r18, 0x07	; 7
    15c8:	33 27       	eor	r19, r19
    15ca:	da 01       	movw	r26, r20
    15cc:	99 0f       	add	r25, r25
    15ce:	31 1d       	adc	r19, r1
    15d0:	87 fd       	sbrc	r24, 7
    15d2:	91 60       	ori	r25, 0x01	; 1
    15d4:	00 96       	adiw	r24, 0x00	; 0
    15d6:	61 05       	cpc	r22, r1
    15d8:	71 05       	cpc	r23, r1
    15da:	39 f4       	brne	.+14     	; 0x15ea <__ftoa_engine+0x28>
    15dc:	32 60       	ori	r19, 0x02	; 2
    15de:	2e 5f       	subi	r18, 0xFE	; 254
    15e0:	3d 93       	st	X+, r19
    15e2:	30 e3       	ldi	r19, 0x30	; 48
    15e4:	2a 95       	dec	r18
    15e6:	e1 f7       	brne	.-8      	; 0x15e0 <__ftoa_engine+0x1e>
    15e8:	08 95       	ret
    15ea:	9f 3f       	cpi	r25, 0xFF	; 255
    15ec:	30 f0       	brcs	.+12     	; 0x15fa <__ftoa_engine+0x38>
    15ee:	80 38       	cpi	r24, 0x80	; 128
    15f0:	71 05       	cpc	r23, r1
    15f2:	61 05       	cpc	r22, r1
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <__ftoa_engine+0x36>
    15f6:	3c 5f       	subi	r19, 0xFC	; 252
    15f8:	3c 5f       	subi	r19, 0xFC	; 252
    15fa:	3d 93       	st	X+, r19
    15fc:	91 30       	cpi	r25, 0x01	; 1
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <__ftoa_engine+0x40>
    1600:	80 68       	ori	r24, 0x80	; 128
    1602:	91 1d       	adc	r25, r1
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	1f 93       	push	r17
    160a:	0f 93       	push	r16
    160c:	ff 92       	push	r15
    160e:	ef 92       	push	r14
    1610:	19 2f       	mov	r17, r25
    1612:	98 7f       	andi	r25, 0xF8	; 248
    1614:	96 95       	lsr	r25
    1616:	e9 2f       	mov	r30, r25
    1618:	96 95       	lsr	r25
    161a:	96 95       	lsr	r25
    161c:	e9 0f       	add	r30, r25
    161e:	ff 27       	eor	r31, r31
    1620:	e4 5c       	subi	r30, 0xC4	; 196
    1622:	fe 4f       	sbci	r31, 0xFE	; 254
    1624:	99 27       	eor	r25, r25
    1626:	33 27       	eor	r19, r19
    1628:	ee 24       	eor	r14, r14
    162a:	ff 24       	eor	r15, r15
    162c:	a7 01       	movw	r20, r14
    162e:	e7 01       	movw	r28, r14
    1630:	05 90       	lpm	r0, Z+
    1632:	08 94       	sec
    1634:	07 94       	ror	r0
    1636:	28 f4       	brcc	.+10     	; 0x1642 <__ftoa_engine+0x80>
    1638:	36 0f       	add	r19, r22
    163a:	e7 1e       	adc	r14, r23
    163c:	f8 1e       	adc	r15, r24
    163e:	49 1f       	adc	r20, r25
    1640:	51 1d       	adc	r21, r1
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	88 1f       	adc	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	06 94       	lsr	r0
    164c:	a1 f7       	brne	.-24     	; 0x1636 <__ftoa_engine+0x74>
    164e:	05 90       	lpm	r0, Z+
    1650:	07 94       	ror	r0
    1652:	28 f4       	brcc	.+10     	; 0x165e <__ftoa_engine+0x9c>
    1654:	e7 0e       	add	r14, r23
    1656:	f8 1e       	adc	r15, r24
    1658:	49 1f       	adc	r20, r25
    165a:	56 1f       	adc	r21, r22
    165c:	c1 1d       	adc	r28, r1
    165e:	77 0f       	add	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	66 1f       	adc	r22, r22
    1666:	06 94       	lsr	r0
    1668:	a1 f7       	brne	.-24     	; 0x1652 <__ftoa_engine+0x90>
    166a:	05 90       	lpm	r0, Z+
    166c:	07 94       	ror	r0
    166e:	28 f4       	brcc	.+10     	; 0x167a <__ftoa_engine+0xb8>
    1670:	f8 0e       	add	r15, r24
    1672:	49 1f       	adc	r20, r25
    1674:	56 1f       	adc	r21, r22
    1676:	c7 1f       	adc	r28, r23
    1678:	d1 1d       	adc	r29, r1
    167a:	88 0f       	add	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	66 1f       	adc	r22, r22
    1680:	77 1f       	adc	r23, r23
    1682:	06 94       	lsr	r0
    1684:	a1 f7       	brne	.-24     	; 0x166e <__ftoa_engine+0xac>
    1686:	05 90       	lpm	r0, Z+
    1688:	07 94       	ror	r0
    168a:	20 f4       	brcc	.+8      	; 0x1694 <__ftoa_engine+0xd2>
    168c:	49 0f       	add	r20, r25
    168e:	56 1f       	adc	r21, r22
    1690:	c7 1f       	adc	r28, r23
    1692:	d8 1f       	adc	r29, r24
    1694:	99 0f       	add	r25, r25
    1696:	66 1f       	adc	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	88 1f       	adc	r24, r24
    169c:	06 94       	lsr	r0
    169e:	a9 f7       	brne	.-22     	; 0x168a <__ftoa_engine+0xc8>
    16a0:	84 91       	lpm	r24, Z
    16a2:	10 95       	com	r17
    16a4:	17 70       	andi	r17, 0x07	; 7
    16a6:	41 f0       	breq	.+16     	; 0x16b8 <__ftoa_engine+0xf6>
    16a8:	d6 95       	lsr	r29
    16aa:	c7 95       	ror	r28
    16ac:	57 95       	ror	r21
    16ae:	47 95       	ror	r20
    16b0:	f7 94       	ror	r15
    16b2:	e7 94       	ror	r14
    16b4:	1a 95       	dec	r17
    16b6:	c1 f7       	brne	.-16     	; 0x16a8 <__ftoa_engine+0xe6>
    16b8:	e2 ee       	ldi	r30, 0xE2	; 226
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	68 94       	set
    16be:	15 90       	lpm	r1, Z+
    16c0:	15 91       	lpm	r17, Z+
    16c2:	35 91       	lpm	r19, Z+
    16c4:	65 91       	lpm	r22, Z+
    16c6:	95 91       	lpm	r25, Z+
    16c8:	05 90       	lpm	r0, Z+
    16ca:	7f e2       	ldi	r23, 0x2F	; 47
    16cc:	73 95       	inc	r23
    16ce:	e1 18       	sub	r14, r1
    16d0:	f1 0a       	sbc	r15, r17
    16d2:	43 0b       	sbc	r20, r19
    16d4:	56 0b       	sbc	r21, r22
    16d6:	c9 0b       	sbc	r28, r25
    16d8:	d0 09       	sbc	r29, r0
    16da:	c0 f7       	brcc	.-16     	; 0x16cc <__ftoa_engine+0x10a>
    16dc:	e1 0c       	add	r14, r1
    16de:	f1 1e       	adc	r15, r17
    16e0:	43 1f       	adc	r20, r19
    16e2:	56 1f       	adc	r21, r22
    16e4:	c9 1f       	adc	r28, r25
    16e6:	d0 1d       	adc	r29, r0
    16e8:	7e f4       	brtc	.+30     	; 0x1708 <__ftoa_engine+0x146>
    16ea:	70 33       	cpi	r23, 0x30	; 48
    16ec:	11 f4       	brne	.+4      	; 0x16f2 <__ftoa_engine+0x130>
    16ee:	8a 95       	dec	r24
    16f0:	e6 cf       	rjmp	.-52     	; 0x16be <__ftoa_engine+0xfc>
    16f2:	e8 94       	clt
    16f4:	01 50       	subi	r16, 0x01	; 1
    16f6:	30 f0       	brcs	.+12     	; 0x1704 <__ftoa_engine+0x142>
    16f8:	08 0f       	add	r16, r24
    16fa:	0a f4       	brpl	.+2      	; 0x16fe <__ftoa_engine+0x13c>
    16fc:	00 27       	eor	r16, r16
    16fe:	02 17       	cp	r16, r18
    1700:	08 f4       	brcc	.+2      	; 0x1704 <__ftoa_engine+0x142>
    1702:	20 2f       	mov	r18, r16
    1704:	23 95       	inc	r18
    1706:	02 2f       	mov	r16, r18
    1708:	7a 33       	cpi	r23, 0x3A	; 58
    170a:	28 f0       	brcs	.+10     	; 0x1716 <__ftoa_engine+0x154>
    170c:	79 e3       	ldi	r23, 0x39	; 57
    170e:	7d 93       	st	X+, r23
    1710:	2a 95       	dec	r18
    1712:	e9 f7       	brne	.-6      	; 0x170e <__ftoa_engine+0x14c>
    1714:	10 c0       	rjmp	.+32     	; 0x1736 <__ftoa_engine+0x174>
    1716:	7d 93       	st	X+, r23
    1718:	2a 95       	dec	r18
    171a:	89 f6       	brne	.-94     	; 0x16be <__ftoa_engine+0xfc>
    171c:	06 94       	lsr	r0
    171e:	97 95       	ror	r25
    1720:	67 95       	ror	r22
    1722:	37 95       	ror	r19
    1724:	17 95       	ror	r17
    1726:	17 94       	ror	r1
    1728:	e1 18       	sub	r14, r1
    172a:	f1 0a       	sbc	r15, r17
    172c:	43 0b       	sbc	r20, r19
    172e:	56 0b       	sbc	r21, r22
    1730:	c9 0b       	sbc	r28, r25
    1732:	d0 09       	sbc	r29, r0
    1734:	98 f0       	brcs	.+38     	; 0x175c <__ftoa_engine+0x19a>
    1736:	23 95       	inc	r18
    1738:	7e 91       	ld	r23, -X
    173a:	73 95       	inc	r23
    173c:	7a 33       	cpi	r23, 0x3A	; 58
    173e:	08 f0       	brcs	.+2      	; 0x1742 <__ftoa_engine+0x180>
    1740:	70 e3       	ldi	r23, 0x30	; 48
    1742:	7c 93       	st	X, r23
    1744:	20 13       	cpse	r18, r16
    1746:	b8 f7       	brcc	.-18     	; 0x1736 <__ftoa_engine+0x174>
    1748:	7e 91       	ld	r23, -X
    174a:	70 61       	ori	r23, 0x10	; 16
    174c:	7d 93       	st	X+, r23
    174e:	30 f0       	brcs	.+12     	; 0x175c <__ftoa_engine+0x19a>
    1750:	83 95       	inc	r24
    1752:	71 e3       	ldi	r23, 0x31	; 49
    1754:	7d 93       	st	X+, r23
    1756:	70 e3       	ldi	r23, 0x30	; 48
    1758:	2a 95       	dec	r18
    175a:	e1 f7       	brne	.-8      	; 0x1754 <__ftoa_engine+0x192>
    175c:	11 24       	eor	r1, r1
    175e:	ef 90       	pop	r14
    1760:	ff 90       	pop	r15
    1762:	0f 91       	pop	r16
    1764:	1f 91       	pop	r17
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	99 27       	eor	r25, r25
    176c:	87 fd       	sbrc	r24, 7
    176e:	90 95       	com	r25
    1770:	08 95       	ret

00001772 <__prologue_saves__>:
    1772:	2f 92       	push	r2
    1774:	3f 92       	push	r3
    1776:	4f 92       	push	r4
    1778:	5f 92       	push	r5
    177a:	6f 92       	push	r6
    177c:	7f 92       	push	r7
    177e:	8f 92       	push	r8
    1780:	9f 92       	push	r9
    1782:	af 92       	push	r10
    1784:	bf 92       	push	r11
    1786:	cf 92       	push	r12
    1788:	df 92       	push	r13
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	ca 1b       	sub	r28, r26
    179c:	db 0b       	sbc	r29, r27
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	09 94       	ijmp

000017aa <__epilogue_restores__>:
    17aa:	2a 88       	ldd	r2, Y+18	; 0x12
    17ac:	39 88       	ldd	r3, Y+17	; 0x11
    17ae:	48 88       	ldd	r4, Y+16	; 0x10
    17b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    17b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    17b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    17b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    17b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    17ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    17bc:	b9 84       	ldd	r11, Y+9	; 0x09
    17be:	c8 84       	ldd	r12, Y+8	; 0x08
    17c0:	df 80       	ldd	r13, Y+7	; 0x07
    17c2:	ee 80       	ldd	r14, Y+6	; 0x06
    17c4:	fd 80       	ldd	r15, Y+5	; 0x05
    17c6:	0c 81       	ldd	r16, Y+4	; 0x04
    17c8:	1b 81       	ldd	r17, Y+3	; 0x03
    17ca:	aa 81       	ldd	r26, Y+2	; 0x02
    17cc:	b9 81       	ldd	r27, Y+1	; 0x01
    17ce:	ce 0f       	add	r28, r30
    17d0:	d1 1d       	adc	r29, r1
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	ed 01       	movw	r28, r26
    17de:	08 95       	ret

000017e0 <_exit>:
    17e0:	f8 94       	cli

000017e2 <__stop_program>:
    17e2:	ff cf       	rjmp	.-2      	; 0x17e2 <__stop_program>
